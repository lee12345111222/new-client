{"version":3,"file":"static/js/127.7310c8fd.chunk.js","mappings":"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","sources":["lib/fn.ts","container/main/interactiveSec/swag/AddressSelector.tsx","container/main/interactiveSec/swag/SwagDrawing.tsx","container/main/chatroom/chat/MessageList.tsx","components/ui/SendMessageButton.tsx","container/main/chatroom/chat/RepliedDetailSec.tsx","utils/stickers.ts","utils/emoji.ts","container/main/chatroom/chat/StickerDropdown.tsx","components/ui/MessageInput.tsx","container/main/chatroom/Chatroom.tsx","container/main/interactiveSec/NavigateBar.tsx","container/main/interactiveSec/SurveySec.tsx","container/main/score/PersonalScore.tsx","container/main/score/LeaderBoard.tsx","lib/services.ts","container/main/afterEventSurvey/AfterEventSurvey.tsx","container/main/interactiveSec/InteractiveSec.tsx","container/main/agenda/AgendaItem.tsx","container/main/agenda/Agenda.tsx","components/ui/SocketHint.tsx","container/main/nav/HeaderNav.tsx","container/main/modal/ShareWalkin.tsx","container/main/player/PolyPlayer.tsx","components/ui/CustomAvatarButton.tsx","container/main/modal/CustomAvatar.tsx","container/main/modal/ScoreRules.tsx","container/main/modal/GroupChatDesc.tsx","components/ui/DisconnectedSkeleton.tsx","container/main/Main.tsx"],"sourcesContent":["import { Dispatch, SetStateAction } from 'react'\nimport socket from './socket'\n\nexport function sktFetch<T = any>(event: string, data = {}): Promise<{ error: string | null; data: T | null }> {\n    return new Promise((resolve) => {\n        socket.emit(event, data, ({ error, data }: any) => {\n            resolve({ error, data })\n        })\n    })\n}\n\nexport const handleTimestampToString = (timestamp: number): string => {\n    const hour = new Date(timestamp).getHours()\n    const date = new Date(timestamp)\n\n    return `${hour}:${(date.getMinutes() < 10 ? '0' : '') + date.getMinutes()}`\n}\n\nexport const removeDup = <T>(mergedArr: T[], check: (m: T) => string) => {\n    const set = new Set()\n    return mergedArr.filter((m) => {\n        const id = check(m)\n        return set.has(id) ? false : set.add(id)\n    })\n}\n\nexport const handleGetTopics = (ve: string, jsonData: any): string[] => {\n    const keys = Object.keys(jsonData)\n    const topics = keys.filter((key) => {\n        return key.includes(ve) && key.includes('#topic')\n    })\n\n    const topicVals = topics.map((topic) => {\n        return `${jsonData[topic]}`\n    })\n\n    return topicVals\n}\n\nexport const handleGetSymbols = (ve: string, jsonData: any): string[] => {\n    const keys = Object.keys(jsonData)\n    const topics = keys.filter((key) => {\n        return key.includes(ve) && key.includes('#topic')\n    })\n\n    const spks = keys.filter((key) => {\n        return key.includes(ve) && key.includes('#spk')\n    })\n\n    const symbols = topics.map((topic, i) => {\n        return `${jsonData[topic]}_${jsonData[spks[i]]}`\n    })\n\n    return symbols\n}\n\nexport const handleGetSymbolsSpk = (ve: string, jsonData: any): string[] => {\n    const keys = Object.keys(jsonData)\n    const topics = keys.filter((key) => {\n        return key.includes(ve) && key.includes('#topic')\n    })\n\n    const set: Set<string> = new Set()\n\n    const spks = keys.filter((key) => {\n        if (key.includes(ve) && key.includes('Speaker Name') && !set.has(jsonData[key])) {\n            set.add(jsonData[key])\n            return key.includes(ve) && key.includes('#spk')\n        } else return false\n    })\n\n    const symbols = spks.map((spk, i) => {\n        return `${jsonData[topics[i]]}_${jsonData[spk]}`\n    })\n\n    return symbols\n}\n\n/**\n * 判斷 url 的 params，並設定 locale 語言\n */\nexport const handleCheckParams = (slug: string, setLocale: Dispatch<SetStateAction<string>>) => {\n    if (slug.includes('GS')) setLocale('zh')\n    else if (slug.includes('GE') || slug.includes('SE') || slug.includes('AE') || slug.includes('IE')) setLocale('en')\n    else if (slug.includes('JJ')) setLocale('ja')\n    else if (slug.includes('KK')) setLocale('ko')\n    else if (slug.includes('SI')) setLocale('id')\n    else if (slug.includes('ST')) setLocale('th')\n    else if (slug.includes('SV')) setLocale('vi')\n    else setLocale('en')\n}\n\n\n\nexport const toPercent = (num: number, total: number) => {\n    return Math.round((num / total) * 10000) / 100.0\n}\n\nexport const encodeName = (name: string) => {\n    const re = /([^A-Za-z0-9\\s]{1})([^A-Za-z0-9\\s]{1})/\n    return name.replace(re, '$1*')\n}\n\nexport const encodeCompany = (company: string) => {\n    const re1 = /有限公司|股份有限公司/g\n    const re2 = /[^A-Za-z0-9\\s]/\n\n    return company.replace(re1, '').replace(re2, '*')\n}\n\nexport const debounce = (func: any, wait = 450) => {\n    let timer: number\n\n    return (...args:any) => {\n        window.clearTimeout(timer)\n        timer = window.setTimeout(() => func.apply(this, args), wait)\n    }\n}\n","import React, { FC, useEffect, useState } from 'react'\nimport { Button, Input } from 'antd'\nimport xss from 'xss'\n\n\n// import { useActions, useTypedSelector } from '../../../../hooks'\nimport { debounce } from '../../../../lib/fn'\n\n\ntype AddressSelectorProps = {\n    setThanks:any\n}\n\n// type CityName = keyof typeof cityData\n\nconst AddressSelector: FC<AddressSelectorProps> = ({ setThanks }) => {\n    // const [province, setProvince] = useState(provinceData[0].name)\n    // const [cities, setCities] = useState(cityData[provinceData[0].id])\n    // const [cityValue, setCityValue] = useState(cityData[provinceData[0].id][0].name)\n    // const [cityCode, setCityCode] = useState('')\n    // const [area, setArea] = useState<{ city: string; name: string; id: string }[]>([])\n    // const [areaValue, setAreaValue] = useState('')\n    const [inputName, setInputName] = useState('')\n    const [inputPhone, setInputPhone] = useState('')\n    const [inputAddress, setInputAddress] = useState('')\n\n    // const { onPostUserReceiptInfo, updateSwagFinish } = useActions()\n\n    const {\n        user: { _id, name },\n    }:any = {}\n\n    const handleInputName = debounce((val: string) => setInputName(val))\n    const handleInputPhone = debounce((val: string) => setInputPhone(val))\n    const handleInputAddress = debounce((val: string) => setInputAddress(val))\n\n    useEffect(() => {\n        setInputName(name)\n    }, [])\n\n   \n\n    const handleSummit = () => {\n        const address = xss(inputAddress)\n        const name = xss(inputName)\n        const phone = xss(inputPhone)\n        setThanks(true)\n\n        setTimeout(() => {\n            // onPostUserReceiptInfo({ uid: _id, address, name, phone })\n            // updateSwagFinish()\n            setThanks(false)\n        }, 3000)\n    }\n\n    return (\n        <div className=\"swag-collapse-add-receipt-form\">\n            <div className=\"swag-collapse-add-receipt-input\">\n                <div>收件人</div>\n                <Input defaultValue={name} onChange={(e) => handleInputName(e.target.value)} />\n            </div>\n            <div className=\"swag-collapse-add-receipt-input\">\n                <div>收件电话</div>\n                <Input onChange={(e) => handleInputPhone(e.target.value)} />\n            </div>\n            <div className=\"swag-collapse-add-receipt-input\">\n                <div>收件地址</div>\n                <Input onChange={(e) => handleInputAddress(e.target.value)} />\n            </div>\n            <div>\n                <Button onClick={handleSummit} disabled={!inputAddress || !inputName || !inputPhone}>\n                    提交\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default AddressSelector\n","import React, { FC, useEffect, useState } from 'react'\nimport { Collapse } from 'antd'\nimport Lottie from 'react-lottie'\n\nimport AddressSelector from './AddressSelector'\n// import { useTypedSelector, useActions } from '../../../../hooks'\nimport { LottieJSON } from '../../../../utils/links'\nimport { Links } from '../../../../utils/links'\n\nconst { Panel } = Collapse\n\nconst SwagDrawing: FC = () => {\n    const [thanks, setThanks] = useState(false)\n    // const { onGetUserSwagPrize, updateSwagFinish } = useActions()\n\n    const {\n        awards,\n        user: { _id },\n        swag: { prizeFinished },\n    }:any = {user:{},swag:{},awards:{}}\n\n    useEffect(() => {\n        if (prizeFinished) {\n            // window.setTimeout(() => {\n            //     updateSwagFinish()\n            // }, 3000)\n        }\n    }, [prizeFinished])\n\n    const handleSwagDrawing = () => {\n        if (!awards['swag']) {\n            // window.setTimeout(() => {\n            //     onGetUserSwagPrize({ uid: _id })\n            // }, 4000)\n        }\n    }\n\n    return (\n        <Collapse defaultActiveKey={['0']} className=\"swag-collapse\" onChange={handleSwagDrawing}>\n            <Panel className=\"swag-panel\" header=\"点击领取谷歌乘风破浪参会礼品！\" key=\"1\">\n                <div className=\"swag-collapse-body\">\n                    {!awards['swag'] ? (\n                        <div className=\"swag-collapse-drawing\">\n                            <div className=\"swag-collapse-drawing-animation\">\n                                <Lottie\n                                    isClickToPauseDisabled={true}\n                                    options={{\n                                        loop: false,\n                                        autoplay: true,\n                                        animationData: LottieJSON.SWAG_LUCKY_DRAWING,\n                                        rendererSettings: {\n                                            preserveAspectRatio: 'xMidYMid slice'\n                                        }\n                                    }}\n                                    // id=\"swag-drawing-lottie\"\n                                ></Lottie>\n                            </div>\n                            <div className=\"swag-collapse-drawing-text\">\n                                <div>抽奖中...</div>\n                            </div>\n                        </div>\n                    ) : thanks || prizeFinished ? (\n                        <div className=\"swag-collapse-swag-success\">\n                            <div className=\"swag-collapse-swag-success-img\">\n                                {prizeFinished ? (\n                                    <img src={Links.SWAG_GIFT_RUN_OUT} alt=\"\" />\n                                ) : (\n                                    <img src={Links.SWAG_GIFT} alt=\"\" />\n                                )}\n                            </div>\n                            <div className=\"swag-collapse-swag-success-text\">\n                                {prizeFinished ? (\n                                    <div>{awards['swag'].prizeName}</div>\n                                ) : (\n                                    <>\n                                        <div>填写成功 敬请期待</div>\n                                        <div>我们将把礼物寄送至您填写的地址</div>\n                                    </>\n                                )}\n                            </div>\n                        </div>\n                    ) : (\n                        <div className=\"swag-collapse-add-receipt\">\n                            <div className=\"swag-collapse-add-receipt-img\">\n                                <img\n                                    src={`https://oss.uppmkt.com/cxo/img/swag/Swag_${awards['swag'].prizeName}.png`}\n                                    alt=\"\"\n                                />\n                            </div>\n                            <div className=\"swag-collapse-add-receipt-prize\">\n                                <div className=\"swag-collapse-prize\">\n                                    <div>恭喜您抽中</div>\n                                    <div>\n                                        {awards['pre'] && (\n                                            <>\n                                                <span>会前提问专属好礼 </span>与{' '}\n                                            </>\n                                        )}\n\n                                        <span>{awards['swag'].prizeName}</span>\n                                    </div>\n                                </div>\n                                <p>请填写收件人信息，我们将把礼物寄送至您填写的地址</p>\n                            </div>\n                            <AddressSelector setThanks={setThanks} />\n                        </div>\n                    )}\n                </div>\n            </Panel>\n        </Collapse>\n    )\n}\n\nexport default SwagDrawing\n","import React, { FC, RefObject, UIEventHandler, Fragment } from 'react'\nimport { Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\nimport { useIntl } from 'react-intl'\n\n// import { useTypedSelector } from '../../../../hooks/useTypedSelector'\nimport { handleTimestampToString } from '../../../../lib/fn'\nimport { icons } from '../../../../lib/icons'\nimport { RepliedDetail } from '../../interactiveSec/InteractiveSec'\nimport { useSelector } from 'react-redux'\nimport { Obj } from '../../../../store/mainSlice'\n\ntype MessageListProps = {\n    scrollRef: RefObject<HTMLDivElement>\n    handleScroll: UIEventHandler<HTMLDivElement>\n    handleReplyMessageClick(pkg: RepliedDetail): void\n}\n\nconst MessageList: FC<MessageListProps> = ({ handleReplyMessageClick, scrollRef, handleScroll }) => {\n    const {\n        user: {\n            user: { _id },\n        },\n        chat: { loading },\n    }:any = {user:{user:{}},chat:{messages:[],loading:false}}\n\n    const main:Obj = useSelector((state: any) => { return state.main });\n\n    const {mainInitial:{chat={}}} = main\n    const {messages=[]}:Obj = chat\n\n\n    const intl = useIntl()\n\n    const antIcon = <LoadingOutlined style={{ fontSize: 25 }} spin />\n\n    return (\n        <div className=\"message-list scroll-Control\" onScroll={handleScroll}>\n            <div className=\"message-list-loading\">{loading && <Spin indicator={antIcon} />}</div>\n            {[].map((message:any) => {\n                return (\n                    <Fragment key={message._id}>\n                        {message.to === null ? null : (\n                            <div\n                                className={\n                                    message.from._id === _id\n                                        ? 'message-list-replied-hint-self'\n                                        : 'message-list-replied-hint'\n                                }\n                            >\n                                {message.from.name +\n                                    ' ' +\n                                    intl.formatMessage({ id: 'main.reply to' }) +\n                                    ' ' +\n                                    (message.to as RepliedDetail).repliedName}\n                            </div>\n                        )}\n                        <div\n                            className={\n                                message.from._id === _id\n                                    ? message.from.helper\n                                        ? ['message-list-item-self', 'googler'].join(' ')\n                                        : 'message-list-item-self'\n                                    : message.from.helper\n                                    ? ['message-list-item', 'googler'].join(' ')\n                                    : 'message-list-item'\n                            }\n                        >\n                            {message.type === 'sticker' ? null : (\n                                <div\n                                    className=\"message-list-item-dot-btn\"\n                                    onClick={() =>\n                                        handleReplyMessageClick({\n                                            replied_id: message._id,\n                                            repliedAvatar: message.from.avatar,\n                                            repliedName: message.from.name,\n                                            repliedContent: message.content,\n                                        })\n                                    }\n                                    role=\"presentation\"\n                                >\n                                    {message.from._id === _id ? icons.arrow_right() : icons.arrow_left()}\n                                </div>\n                            )}\n\n                            <div className=\"message-list-item-user-time\">\n                                {handleTimestampToString(message.createTime)}\n                            </div>\n\n                            {message.to === null ? null : (\n                                <div className=\"message-list-item-user-replied-content\">\n                                    {(message.to as RepliedDetail).repliedContent.length > 100\n                                        ? (message.to as RepliedDetail).repliedContent.substring(0, 100) + '...'\n                                        : (message.to as RepliedDetail).repliedContent}\n                                </div>\n                            )}\n\n                            <div className=\"message-list-item-user-main\">\n                                <div className=\"message-list-item-user-container\">\n                                    <img\n                                        src={message.from.avatar}\n                                        alt=\"avatar img\"\n                                        className=\"message-list-item-user-avatar\"\n                                    />\n                                </div>\n                                <div className=\"message-list-item-user-right\">\n                                    <div className=\"message-list-item-user-detail\">\n                                        <div className=\"message-list-item-user-name\">{message.from.name}</div>\n                                        {message.from.googler ? (\n                                            <div className=\"message-list-item-user-company\">{message.from.company}</div>\n                                        ) : null}\n                                    </div>\n                                    {message.type === 'sticker' ? (\n                                        <div className=\"message-list-item-content-sticker\">\n                                            <img src={message.content} alt=\"sticker\" />\n                                        </div>\n                                    ) : (\n                                        <div\n                                            className=\"message-list-item-content\"\n                                            dangerouslySetInnerHTML={{ __html: message.content }}\n                                        />\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                    </Fragment>\n                )\n            })}\n            <div className=\"message-list-holder\" ref={scrollRef}></div>\n        </div>\n    )\n}\n\nexport default MessageList\n","import React, { FC } from 'react'\n\nimport { icons } from '../../lib/icons'\n\ninterface SendMessageButtonProps {\n    handleSubmitMessage: (type: string) => void\n    inputContent: string\n    type: string\n}\n\nconst SendMessageButton: FC<SendMessageButtonProps> = ({ handleSubmitMessage, inputContent, type }) => {\n    return (\n        <button\n            onClick={() => handleSubmitMessage(type)}\n            id=\"send-message-button\"\n            className=\"send-message-button\"\n            disabled={inputContent === ''}\n        >\n            {icons.paperPlane()}\n        </button>\n    )\n}\n\nexport default SendMessageButton\n","import React, { FC } from 'react'\n\nimport { RepliedDetail } from '../../interactiveSec/InteractiveSec'\nimport { icons } from '../../../../lib/icons'\n\ntype RepliedDetailSecProps = {\n    replied: RepliedDetail\n    handleRepliedDetailClose: () => void\n}\n\nconst RepliedDetailSec: FC<RepliedDetailSecProps> = ({ replied, handleRepliedDetailClose }) => {\n    return (\n        <div className=\"message-list-replied-section\">\n            <div className=\"message-list-replied-section-body\">\n                <div className=\"message-list-replied-section-img-container\">\n                    <img src={replied.repliedAvatar} alt={replied.repliedAvatar} />\n                </div>\n                <div className=\"message-list-replied-section-content-container\">\n                    <div className=\"message-list-replied-section-name\">{replied.repliedName}</div>\n                    <div className=\"message-list-replied-section-content\">\n                        {replied.repliedContent.length > 40\n                            ? replied.repliedContent.substring(0, 40) + '...'\n                            : replied.repliedContent}\n                    </div>\n                </div>\n                <button className=\"message-list-replied-section-close-btn\" onClick={handleRepliedDetailClose}>\n                    {icons.close()}\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default RepliedDetailSec\n","export default {\n    stickers: [\n        'https://oss.uppmkt.com/cxo/img/sticker/Stickers_001.png',\n        'https://oss.uppmkt.com/cxo/img/sticker/Stickers_002.png',\n        'https://oss.uppmkt.com/cxo/img/sticker/Stickers_003.png',\n        'https://oss.uppmkt.com/cxo/img/sticker/Stickers_004.png',\n        'https://oss.uppmkt.com/cxo/img/sticker/Stickers_005.png',\n        'https://oss.uppmkt.com/cxo/img/sticker/Stickers_006.png',\n        'https://oss.uppmkt.com/cxo/img/sticker/Stickers_007.png',\n        'https://oss.uppmkt.com/cxo/img/sticker/Stickers_008.png',\n    ],\n}\n","export default {\n    emoji: [' 🤗 ', ' 🤠 ', ' 👍 ', ' 👌 ', ' 🙌 ', ' 👏 '],\n}\n","import React, { FC, MouseEvent } from 'react'\nimport { Dropdown, Button } from 'antd'\nimport { icons } from '../../../../lib/icons'\nimport gifStickers from '../../../../utils/stickers'\nimport emojis from '../../../../utils/emoji'\nimport '../../../../styles/sticker-dropdown.scss'\n\ntype StickerDropdownProps = {\n    handleSendSticker: (e: MouseEvent) => void\n    handleSendEmoji: (e: MouseEvent) => void\n}\n\nconst StickerDropdown: FC<StickerDropdownProps> = ({ handleSendSticker, handleSendEmoji }) => {\n    const overlay = (\n        <div className=\"sticker-dropdown-box\">\n            <div className=\"sticker-dropdown-emojiBox\" role=\"presentation\" onClick={handleSendEmoji}>\n                {emojis.emoji.map((emj) => {\n                    return (\n                        <span className=\"emoji-item\" key={emj} data-name={emj}>\n                            {emj}\n                        </span>\n                    )\n                })}\n            </div>\n            <div className=\"sticker-dropdown-bigStickerBox\" role=\"presentation\" onClick={handleSendSticker}>\n                {gifStickers.stickers.map((stk) => {\n                    return (\n                        <div className=\"bigSticker-itemBox\" key={stk}>\n                            <img className=\"bigSticker-itemSvg\" src={stk} alt=\"sticker\" />\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n\n    return (\n        <Dropdown overlay={overlay} placement=\"topRight\">\n            <Button className=\"send-message-button\">{icons.stickerFace()}</Button>\n        </Dropdown>\n    )\n}\n\nexport default StickerDropdown\n","import React, { FC, useEffect, MouseEvent } from 'react'\nimport { useIntl } from 'react-intl'\n\nimport SendMessageButton from './SendMessageButton'\nimport { MessageAndQuestionProps } from '../../container/main/interactiveSec/InteractiveSec'\nimport RepliedDetailSec from '../../container/main/chatroom/chat/RepliedDetailSec'\nimport { RepliedDetail } from '../../container/main/interactiveSec/InteractiveSec'\nimport StickerDropdown from '../../container/main/chatroom/chat/StickerDropdown'\n\ntype MessageInputProps = {\n    section: string\n    showReply: boolean\n    replied: RepliedDetail\n    handleRepliedDetailClose: () => void\n    handleSendSticker?: (e: MouseEvent) => void\n    handleSendEmoji?: (e: MouseEvent) => void\n}\n// FC<MessageAndQuestionProps & MessageInputProps> \nconst MessageInput: any = ({\n    messageInputRef,\n    handleInputKeyDown,\n    setIsInputtingMandarin,\n    handleSubmitMessage,\n    setInputContent,\n    inputContent,\n    type,\n    showReply,\n    replied,\n    handleRepliedDetailClose,\n    section,\n    handleSendSticker,\n    handleSendEmoji,\n}:any) => {\n    const intl = useIntl()\n\n    /**\n     * 頁面初始化時對焦聊天室輸入框\n     */\n    useEffect(() => {\n        if (messageInputRef && messageInputRef.current) {\n            messageInputRef.current.focus()\n        }\n    }, [])\n\n    return (\n        <div className=\"message-box-container\">\n            {section === 'chatroom'\n                ? showReply && (\n                      <RepliedDetailSec replied={replied} handleRepliedDetailClose={handleRepliedDetailClose} />\n                  )\n                : null}\n\n            <form autoComplete=\"off\" onSubmit={(e) => e.preventDefault()} className=\"message-form\">\n                <textarea\n                    placeholder={\n                        section === 'chatroom' ? intl.formatMessage({ id: 'main.Type your reply' }) : '发起问题'\n                    }\n                    maxLength={500}\n                    ref={messageInputRef}\n                    onKeyPress={(e) => handleInputKeyDown(type, e)}\n                    onCompositionStart={() => setIsInputtingMandarin(true)}\n                    onCompositionEnd={() => setIsInputtingMandarin(false)}\n                    className=\"message-textarea scroll-Control\"\n                    onChange={(e) => setInputContent(e.target.value)}\n                    value={inputContent}\n                />\n            </form>\n\n            {section === 'chatroom' && handleSendSticker && handleSendEmoji ? (\n                <StickerDropdown handleSendSticker={handleSendSticker} handleSendEmoji={handleSendEmoji} />\n            ) : null}\n\n            <SendMessageButton handleSubmitMessage={handleSubmitMessage} type={type} inputContent={inputContent} />\n        </div>\n    )\n}\n\nexport default MessageInput\n","import React, { useEffect, useRef, FC, UIEvent, useContext, MouseEvent } from 'react'\n\n// import { useTypedSelector, useActions } from '../../../hooks'\nimport { RepliedDetail } from '../interactiveSec/InteractiveSec'\nimport MessageList from './chat/MessageList'\nimport MessageInput from '../../../components/ui/MessageInput'\nimport { MessageAndQuestionProps } from '../interactiveSec/InteractiveSec'\nimport { localeContext, LocaleProps } from '../../../index'\n\ntype ChatroomProps = {\n    handleReplyMessageClick: (pkg: RepliedDetail) => void\n    showReply: boolean\n    replied: RepliedDetail\n    handleRepliedDetailClose: () => void\n    handleSendSticker(e: MouseEvent): void\n    handleSendEmoji: (e: MouseEvent) => void\n}\n\nconst Chatroom: FC<MessageAndQuestionProps & ChatroomProps> = ({\n    messageInputRef,\n    handleInputKeyDown,\n    handleSubmitMessage,\n    setIsInputtingMandarin,\n    setInputContent,\n    inputContent,\n    type,\n    handleReplyMessageClick,\n    handleRepliedDetailClose,\n    showReply,\n    replied,\n    handleSendSticker,\n    handleSendEmoji,\n}) => {\n    const scrollRef = useRef<HTMLDivElement>(null)\n\n    const {\n        user: {\n            user: { _id, eventId },\n        },\n        chat: { messages, comingData },\n    }:any = {user:{user:{}}, chat:{messages:[],}}\n\n\n    const { locale } = useContext(localeContext) as LocaleProps\n\n    /**\n     * 取得歷史訊息清單\n     */\n    useEffect(() => {\n        // onGetHistoryMessages({ _id, room: eventId })\n    }, [eventId, locale])\n\n    /**\n     * 監聽訊息發出時回到視窗底部\n     */\n    useEffect(() => {\n        if (scrollRef && scrollRef.current) {\n            scrollRef.current.scrollIntoView({ block: 'end' })\n        }\n    }, [messages.length])\n\n    /**\n     * @param e\n     * 處理訊息表單 scroll lazy loading\n     */\n    const handleScroll = async (e: UIEvent<HTMLDivElement>) => {\n        const $scroll = e.target as HTMLDivElement\n\n        if ($scroll.scrollTop === 0 && $scroll.scrollHeight > $scroll.clientHeight && comingData) {\n            // onGetRestHistoryMessages({ _id, localMessageCount: messages.length, room: eventId })\n        }\n    }\n\n    return (\n        <div className=\"chat-wrap\">\n            <MessageList\n                scrollRef={scrollRef}\n                handleScroll={handleScroll}\n                handleReplyMessageClick={handleReplyMessageClick}\n            />\n\n            <MessageInput\n                section={'chatroom'}\n                messageInputRef={messageInputRef}\n                handleInputKeyDown={handleInputKeyDown}\n                setIsInputtingMandarin={setIsInputtingMandarin}\n                handleSubmitMessage={handleSubmitMessage}\n                setInputContent={setInputContent}\n                inputContent={inputContent}\n                type={type}\n                showReply={showReply}\n                replied={replied}\n                handleRepliedDetailClose={handleRepliedDetailClose}\n                handleSendSticker={handleSendSticker}\n                handleSendEmoji={handleSendEmoji}\n            />\n        </div>\n    )\n}\n\nexport default Chatroom\n","import React, { FC, Dispatch, SetStateAction, memo } from 'react'\nimport { Link, useLocation } from 'react-router-dom'\nimport { Menu } from 'antd'\nimport { useIntl } from 'react-intl'\n\nimport { icons } from '../../../lib/icons'\n\ntype NavigateBarProps = {\n    setChangeEvent: Dispatch<SetStateAction<boolean>>\n}\n\nconst NavigateBar: FC<NavigateBarProps> = ({ setChangeEvent }) => {\n    const location = useLocation()\n\n    const intl = useIntl()\n\n    /**\n     * 點擊互動區 tab 時為單純切換會場\n     */\n    const handleClick = () => {\n        setChangeEvent(false)\n    }\n\n    return (\n        <Menu onClick={handleClick} selectedKeys={[location.pathname]} mode=\"horizontal\">\n            <Menu.Item key=\"/main\">\n                {icons.chat_icon()}\n                <Link to=\"/main\">{intl.formatMessage({ id: 'main.Chat' })}</Link>\n            </Menu.Item>\n            {/* <Menu.Item key=\"/main/qs\">\n                {icons.questions_icon()}\n                <Link to=\"/main/qs\">{intl.formatMessage({ id: 'main.Questions' })}</Link>\n            </Menu.Item> */}\n            {/* <Menu.Item key=\"/main/middle\">\n                {icons.Quiz_icon()}\n                <Link to=\"/main/middle\">{intl.formatMessage({ id: 'main.Quiz' })}</Link>\n            </Menu.Item> */}\n            <Menu.Item key=\"/main/post\">\n                {icons.survey_icon()}\n                <Link to=\"/main/post\">{intl.formatMessage({ id: 'main.Survey' })}</Link>\n            </Menu.Item>\n            <Menu.Item key=\"/main/score\">\n                {icons.temperature()}\n                <Link to=\"/main/score\">{intl.formatMessage({ id: 'main.Score' })}</Link>\n            </Menu.Item>\n            <Menu.Item key=\"/main/leaders\">\n                {icons.cap()}\n                <Link to=\"/main/leaders\">{intl.formatMessage({ id: 'main.LeaderBoard' })}</Link>\n            </Menu.Item>\n        </Menu>\n    )\n}\n\nexport default memo(NavigateBar)\n","import React, { FC, useState, useEffect, MutableRefObject } from 'react'\nimport { Collapse, Button, Progress } from 'antd'\nimport { useIntl } from 'react-intl'\n\n// import { SelectedOption, MiddleSurveys } from '../../../state'\n// import { useTypedSelector } from '../../../hooks/useTypedSelector'\nimport { Links } from '../../../utils/links'\n\nconst { Panel } = Collapse\n\ntype SurveySecProps = {\n    currentSurveyRef: any\n    handleSubmitSurveyAnswer(selectedOption: any[], surveyData: { surveyId: string; category: string }): void\n    thanksShow: '_post' | '_middle' | null\n}\n\nconst SurveySec: FC<SurveySecProps> = ({ currentSurveyRef, thanksShow, handleSubmitSurveyAnswer }) => {\n    const [selectedOption, setSelectedOption] = useState<any[]>([])\n    const [submitDisabled, setSubmitDisabled] = useState(true)\n    const [boxChecked, setBoxChecked] = useState<string[]>([])\n\n    const {\n        result: { result, total, correct },\n    }:any = {}\n\n    const intl = useIntl()\n\n    /**\n     * 判斷選中選項是否大於 0，disable submit button\n     */\n    useEffect(() => {\n        if (selectedOption.length > 0) setSubmitDisabled(false)\n        else setSubmitDisabled(true)\n    }, [selectedOption.length])\n\n    /**\n     * 處理點擊選項，將選中項目加入待提交陣列\n     * @param pkg 選中目標資訊物件\n     */\n    const handleOptionClick = (pkg: any) => {\n        if (pkg.type === 'multiple') {\n            if (!boxChecked.includes(pkg.option)) {\n                setBoxChecked((state) => [...state, pkg.option])\n                setSelectedOption((state) => [...state, pkg])\n            } else {\n                setBoxChecked((state) => state.filter((s) => s !== pkg.option))\n                setSelectedOption((state) => state.filter((s) => s.option !== pkg.option))\n            }\n        } else if (pkg.type === 'single') {\n            if (!boxChecked.includes(pkg.option)) {\n                setBoxChecked([pkg.option])\n                setSelectedOption([pkg])\n            } else {\n                setBoxChecked([])\n                setSelectedOption([])\n            }\n        } else return\n    }\n\n    if (result && result.length) {\n        return (\n            <Collapse defaultActiveKey={['1']} className=\"survey-collapse\">\n                <Panel className=\"survey-panel\" header=\"Live Poll\" key=\"1\">\n                    <h3 className=\"survey-question\">{(currentSurveyRef.current as any).subject}</h3>\n\n                    <div className=\"survey-process\">\n                        {result.map((rlt:any) => {\n                            return (\n                                <div key={rlt.option} className=\"survey-process-container\">\n                                    <div className=\"survey-process-text\">\n                                        <div\n                                            className=\"survey-process-q-text\"\n                                            style={\n                                                correct.includes(rlt.option)\n                                                    ? { fontWeight: '600' }\n                                                    : { fontWeight: '400' }\n                                            }\n                                        >\n                                            {rlt.option}\n                                        </div>\n                                        <div className=\"survey-process-text-right\">\n                                            <span className=\"survey-process-text-percent\">\n                                                {total === 0 ? (100 / result.length).toFixed(2) : rlt.percent}%\n                                            </span>\n                                        </div>\n                                    </div>\n                                    <Progress\n                                        strokeColor={correct.includes(rlt.option) ? '#669DF6' : '#DADCE0'}\n                                        percent={total === 0 ? 100 / result.length : rlt.percent}\n                                        showInfo={false}\n                                    />\n                                </div>\n                            )\n                        })}\n                    </div>\n                    <div className=\"survey-result-unlock\">\n                        <div className=\"survey-result-unlock-body\">\n                            <div className=\"survey-result-unlock-img\">\n                                <img src={Links.UNLOCK_ICON} alt=\"lock\" />\n                            </div>\n                            <div className=\"survey-result-unlock-content\">\n                                <img src={Links.UNLOCK_LOCK} alt=\"lock\" />\n                                {intl.formatMessage({ id: 'main.Unlock' })}\n                            </div>\n                        </div>\n                    </div>\n                </Panel>\n            </Collapse>\n        )\n    }\n\n    return (\n        <Collapse defaultActiveKey={['1']} className=\"survey-collapse\">\n            <Panel className=\"survey-panel\" header={intl.formatMessage({ id: 'main.Live Polling' })} key=\"1\">\n                <h3>{currentSurveyRef.current && currentSurveyRef.current.subject}</h3>\n\n                {thanksShow ? (\n                    <div className=\"survey-done-content\">\n                        <div className=\"survey-doneImg-box\">\n                            <img className=\"survey-doneImg\" src={Links.DONE} alt=\"\" />\n                        </div>\n                        {thanksShow === '_post'\n                            ? intl.formatMessage({ id: 'main.Done!' })\n                            : intl.formatMessage({ id: 'main.WaitOtherUser' })}\n                    </div>\n                ) : (\n                    <>\n                        <div className=\"survey-options\">\n                            {currentSurveyRef.current &&\n                                currentSurveyRef.current.options.map((option:any) => (\n                                    <div key={option.option}>\n                                        <input\n                                            id={option.option}\n                                            type=\"checkbox\"\n                                            className=\"survey-options-checkbox\"\n                                            checked={boxChecked.includes(option.option)}\n                                            onChange={() =>\n                                                handleOptionClick({\n                                                    option: option.option,\n                                                    type: (currentSurveyRef.current as any).type,\n                                                })\n                                            }\n                                        />\n                                        <label\n                                            htmlFor={option.option}\n                                            className=\"survey-options-label\"\n                                            onChange={() =>\n                                                handleOptionClick({\n                                                    option: option.option,\n                                                    type: (currentSurveyRef.current as any).type,\n                                                })\n                                            }\n                                            role=\"presentation\"\n                                        >\n                                            {option.option}\n                                        </label>\n                                    </div>\n                                ))}\n                        </div>\n\n                        <Button\n                            className=\"survey-btn\"\n                            disabled={submitDisabled}\n                            onClick={() =>\n                                handleSubmitSurveyAnswer(selectedOption, {\n                                    surveyId: (currentSurveyRef.current as any).surveyId,\n                                    category: (currentSurveyRef.current as any).category,\n                                })\n                            }\n                        >\n                            {intl.formatMessage({ id: 'main.Submit' })}\n                        </Button>\n                    </>\n                )}\n            </Panel>\n        </Collapse>\n    )\n}\n\nexport default SurveySec\n","import React, { FC, memo, useState } from 'react'\nimport { Collapse } from 'antd'\nimport { useSelector } from 'react-redux'\nimport { Obj } from '../../../store/globalSlice'\n\n// import { useTypedSelector } from '../../../hooks/useTypedSelector'\n\nconst { Panel } = Collapse\n\nconst PersonalScore: FC = () => {\n    const { scoreDetail={detail:[]}, awards={} }:any = {}\n    const main:Obj = useSelector((state: any) => { return state.main });\n\n    const [collapseOpened, setCollapseOpened] = useState(true)\n\n    return (\n        <div className=\"score-wrap\">\n            <div className=\"score-user-info\">\n                <div className=\"score-user-info-energy-bar\">\n                    <img\n                        src={`https://oss.uppmkt.com/cxo/img/energy/Value-${~~(scoreDetail.score / 1000)}.png`}\n                        alt=\"energy bar\"\n                    />\n                </div>\n                <div className=\"score-user-score\">\n                    <div>目前能量值：{scoreDetail.score}</div>\n                </div>\n            </div>\n            <div className=\"score-list\">\n                {scoreDetail &&\n                    scoreDetail.detail.map((sc:any) => {\n                        return (\n                            <div key={sc.id} className=\"score-list-item\">\n                                <div>{sc.name}</div>\n                                <div>+ {sc.score}</div>\n                            </div>\n                        )\n                    })}\n            </div>\n            <Collapse\n                defaultActiveKey={['1']}\n                className=\"score-user-awards-collapse\"\n                onChange={() => setCollapseOpened((state) => !state)}\n            >\n                <Panel\n                    className={collapseOpened ? 'score-user-awards-panel panel-open' : 'score-user-awards-panel'}\n                    header=\"中奖清单\"\n                    key=\"1\"\n                >\n                    <ul className=\"score-user-awards-list\">\n                        <li>\n                            <div>会前提问</div>\n                            <div>\n                                {awards['pre'] ? (\n                                    <span className=\"score-user-awards\">{awards['pre'].prizeName}</span>\n                                ) : (\n                                    <span className=\"score-user-not-win\">未中奖</span>\n                                )}\n                            </div>\n                        </li>\n                        <li>\n                            <div>乘风破浪参会礼品</div>\n                            <div>\n                                {awards['swag'] ? (\n                                    <span className=\"score-user-awards\">中奖 - {awards['swag'].prizeName}</span>\n                                ) : (\n                                    <span className=\"score-user-not-win\">尚未参与</span>\n                                )}\n                            </div>\n                        </li>\n                        <li>\n                            <div>会中问答</div>\n                            <div>\n                                {awards['middle'] ? (\n                                    <span className=\"score-user-awards\">{awards['middle'].prizeName}</span>\n                                ) : (\n                                    <span className=\"score-user-not-win\">未中奖</span>\n                                )}\n                            </div>\n                        </li>\n                        <li>\n                            <div>互动增能量 登顶抽好礼</div>\n                            <div>\n                                {awards['post'] ? (\n                                    <span className=\"score-user-awards\">{awards['post'].prizeName} </span>\n                                ) : (\n                                    <span className=\"score-user-not-win\">未中奖</span>\n                                )}\n                            </div>\n                        </li>\n                    </ul>\n                </Panel>\n            </Collapse>\n        </div>\n    )\n}\n\nexport default memo(PersonalScore)\n","import React, { FC } from 'react'\n\n// import { useTypedSelector } from '../../../hooks/useTypedSelector'\nimport { Links } from '../../../utils/links'\nimport { encodeName } from '../../../lib/fn'\n\nconst LeaderBoard: FC = () => {\n    const leaders:any = []\n\n    const handleRanking = (rank: number) => {\n        switch (rank) {\n            case 1:\n                return <img src={Links.LEADER_BOARD_NOTE1} alt=\"leader board avatar\" />\n            case 2:\n                return <img src={Links.LEADER_BOARD_NOTE2} alt=\"leader board avatar\" />\n            case 3:\n                return <img src={Links.LEADER_BOARD_NOTE3} alt=\"leader board avatar\" />\n        }\n\n        return <span>{rank}</span>\n    }\n\n    return (\n        <div className=\"leader-board-wrap\">\n            <div className=\"leader-board-title\">能量值排行</div>\n            <div className=\"leader-board-item-header\">\n                <div className=\"leader-board-item-avt\">排行</div>\n                <div className=\"leader-board-item-info\">嘉宾</div>\n                <div>能量值</div>\n            </div>\n            <div className=\"leader-board-list\">\n                {leaders.map((leader:any, i:number) => {\n                    return (\n                        <div key={leader._id} className=\"leader-board-item\">\n                            <div className=\"leader-board-item-rank\">{handleRanking(i + 1)}</div>\n                            <div className=\"leader-board-item-info\">\n                                <div>{encodeName(leader.uid.name)}</div>\n                                <div>{leader.uid.company}</div>\n                            </div>\n                            <div>{leader.score}</div>\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default LeaderBoard\n","import { sktFetch } from './fn'\n\n/**\n * 加入 event id 所屬房間\n * @param eventId\n * @param socketId\n * @param code\n */\nexport function joinInitRoom(_id: string, eventId: string, socketId: string, code: string, channelId: string) {\n    sktFetch('join', { _id, eventId, socketId, code, channelId })\n}\n\n/**\n * 加入 event id 所屬聊天室\n * @param eventId\n * @param socketId\n * @param code\n * @param identifier\n */\nexport function userLocate(eventId: string, socketId: string, code: string, identifier: string) {\n    sktFetch('userLocate', { eventId, socketId, code, identifier })\n}\n\nexport function userSwitchEvent(preEventId: string, afterEventID: string, code: string, socketId: string) {\n    sktFetch('userSwitchEvent', { preEventId, afterEventID, code, socketId })\n}\n\n/**\n * 獲取目前線上等待人數\n */\nexport async function deliverWaitingOnlineCount(code: string) {\n    const { error, data } = await sktFetch('deliverWaitingOnlineCount', { code })\n    return { error, data }\n}\n\n/**\n * 處理切換頻道\n * @param newEventId 要切換過去的 event id\n * @param originalEventId 原本的 event id\n * @param _id 用戶 id\n * @param channelId 要切換過去的頻道 id\n * @returns 錯誤訊息\n */\nexport async function changeEvent(\n    newEventId: string,\n    originalEventId: string,\n    _id: string,\n    channelId: string,\n    code: string\n) {\n    const { error } = await sktFetch('changeEvent', { newEventId, originalEventId, _id, channelId, code })\n    return error\n}\n\n/**\n * 傳送訊息或問題至後台做審查\n * @param from 傳送者 id\n * @param to 回覆至的訊息 id\n * @param msgId 該則訊息的 id\n * @param type 訊息類型\n * @param room 傳送的房間， event id\n * @param content 傳送內容\n * @param createTime 創建時間\n * @returns 錯誤訊息\n */\nexport async function deliverMessageToConsole<T extends string>(\n    from: T,\n    to: null | { replied_id: T; repliedAvatar: T; repliedName: T; repliedContent: T },\n    msgId: T,\n    type: T,\n    room: T,\n    content: T,\n    createTime: number\n) {\n    const { error } = await sktFetch('deliverMessageToConsole', {\n        from,\n        to,\n        msgId,\n        type,\n        room,\n        content,\n        createTime,\n    })\n    return error\n}\n\n/**\n * 獲取目前 agenda index\n */\nexport async function getCurrentAgenda(eventId: string) {\n    const data = await sktFetch('getCurrentAgenda', { eventId })\n    return data\n}\n\n/**\n * 獲取會後問卷開啟狀態\n */\nexport async function checkPostSurveyStatus() {\n    const { data } = await sktFetch('checkPostSurveyStatus')\n    return data\n}\n\n/**\n * 獲取群聊視窗開啟狀態\n */\nexport async function checkGroupChatStatus() {\n    const { data } = await sktFetch('checkGroupChatStatus')\n    return data\n}\n\n/**\n * 前端觸發發起抽獎監聽後，返回確認已收到\n */\nexport async function receiveDrawing({ code, currentEventId }: { code: string; currentEventId: string }) {\n    await sktFetch('receiveDrawing', { code, currentEventId })\n}\n\n/**\n * 前端觸發發起會中問卷後，返回確認已收到\n */\nexport async function receiveSurvey({ code, currentEventId }: { code: string; currentEventId: string }) {\n    await sktFetch('receiveSurvey', { code, currentEventId })\n}\n","import React, { FC, useState, useEffect, Dispatch, SetStateAction, MutableRefObject } from 'react'\nimport { Button, Input } from 'antd'\nimport { useIntl } from 'react-intl'\n\nimport { Survey } from '../../../lib/socketDataTypes'\nimport { Links } from '../../../utils/links'\nimport { PostingResults } from '../interactiveSec/InteractiveSec'\nimport '../../../styles/after-event.scss'\nimport { useNavigate } from 'react-router'\n\nconst { TextArea } = Input\n\ntype AfterEventSurveyProps = {\n    restPostSurveyPage: number\n    setRestPostSurveyPage: Dispatch<SetStateAction<number>>\n    setShowUnlockResult: Dispatch<SetStateAction<boolean>>\n    showUnlockResult: boolean\n    resultRef: MutableRefObject<PostingResults[]>\n    selectedOption: any[]\n    setSelectedOption: Dispatch<SetStateAction<any[]>>\n    textAnswer: string\n    setTextAnswer: Dispatch<SetStateAction<string>>\n    boxChecked: string[]\n    setBoxChecked: Dispatch<SetStateAction<string[]>>\n    postSurveyShow: boolean\n}\n\nconst AfterEventSurvey: FC<AfterEventSurveyProps> = ({\n    restPostSurveyPage,\n    setRestPostSurveyPage,\n    setShowUnlockResult,\n    showUnlockResult,\n    resultRef,\n    selectedOption,\n    setSelectedOption,\n    textAnswer,\n    setTextAnswer,\n    boxChecked,\n    setBoxChecked,\n    postSurveyShow,\n}) => {\n    const intl = useIntl()\n\n    const {\n        user: {\n            user: { _id, code, eventId, postSurveys: userPostSurveys },\n        },\n        postSurvey: { postSurveys },\n    }:any = {user:{user:{}},postSurvey: {postSurvey:[]}}\n\n\n    const [nextDisabled, setNextDisabled] = useState(true)\n    const navigate = useNavigate()\n\n    /**\n     * 判斷選中選項是否大於 0，if not, disable submit button\n     */\n    useEffect(() => {\n        if (\n            selectedOption.length > 0 ||\n            textAnswer.length > 0 ||\n            (restPostSurveyPage && !postSurveys[restPostSurveyPage - 1].mustAnswer)\n        )\n            setNextDisabled(false)\n        else setNextDisabled(true)\n    }, [selectedOption.length, textAnswer.length])\n\n    /**\n     * 點擊會後問卷開始\n     */\n    const handleSurveyStart = () => setRestPostSurveyPage(1)\n\n    /**\n     * 點擊選項，將選中項目加入待提交陣列\n     * @param pkg 選中目標資訊物件\n     */\n    const handleOptionClick = (pkg: any, surveyId: string) => {\n        if (pkg.type === 'multiple') {\n            if (!boxChecked.includes(pkg.option + surveyId)) {\n                setBoxChecked((state) => [...state, pkg.option + surveyId])\n                setSelectedOption((state) => [...state, pkg])\n            } else {\n                setBoxChecked((state) => state.filter((s) => s !== pkg.option + surveyId))\n                setSelectedOption((state) => state.filter((s) => s.option !== pkg.option))\n            }\n        } else if (pkg.type === 'single') {\n            if (!boxChecked.includes(pkg.option + surveyId)) {\n                setBoxChecked((state) => state.filter((s) => !s.includes(surveyId)))\n                setBoxChecked((state) => [...state, pkg.option + surveyId])\n                setSelectedOption([pkg])\n            } else {\n                setBoxChecked((state) => state.filter((s) => !s.includes(surveyId)))\n                setSelectedOption([])\n            }\n        } else return\n    }\n\n    /**\n     * 將單題結果放進待提交陣列，並儲存進資料庫\n     * @param surveyId\n     * @param category\n     */\n    const handleAddResult = (surveyId: string, category: string, type: string, isFinished: boolean) => {\n        let sendingSurvey: { surveyId: string; category: string; selected: any[] | string }\n        const postingResult = { userId: _id, userCode: code, eventId }\n\n        if (type === 'single' || type === 'multiple') {\n            sendingSurvey = { surveyId, category, selected: selectedOption }\n            setSelectedOption([])\n        } else {\n            sendingSurvey = { surveyId, category, selected: textAnswer }\n            setTextAnswer('')\n        }\n\n        const sending = { sendingSurvey, ...postingResult }\n        if (sending.sendingSurvey.selected.length > 0 || isFinished)\n            // onPostUserEventSurveyResult({ sendingData: [sending], isFinished, identifier: 'post', scoreDetail })\n\n        if (resultRef.current.length > 0) {\n            const filteredResults = resultRef.current.filter((r) => r.sendingSurvey.surveyId !== surveyId)\n\n            if (filteredResults.length > 0) resultRef.current = [...filteredResults, sending]\n            else resultRef.current = [sending]\n        } else resultRef.current = [sending]\n    }\n\n    /**\n     * 處理下一題以及最終問卷提交\n     * @param surveyId\n     * @param category\n     * @param type\n     * @param identifier\n     * @param nextSurveyId\n     * @param nextType\n     */\n    const handleNext = (\n        surveyId: string,\n        category: string,\n        type: string,\n        identifier: '_submit' | '_next',\n        nextSurveyId?: string,\n        nextType?: string\n    ) => {\n        if (identifier === '_submit') {\n            handleAddResult(surveyId, category, type, true)\n\n            setShowUnlockResult(true)\n\n            // 3 秒後關閉動畫\n            window.setTimeout(() => {\n                setShowUnlockResult(false)\n            }, 3000)\n        } else {\n            handleAddResult(surveyId, category, type, false)\n\n            if (resultRef.current.length > 0) {\n                const selected = resultRef.current.filter((s) => s.sendingSurvey.surveyId === nextSurveyId)\n                // 選擇題\n                if (nextType === 'single' || nextType === 'multiple') {\n                    if (selected.length > 0) {\n                        setSelectedOption(selected[0].sendingSurvey.selected as any[])\n\n                        for (const op of selected[0].sendingSurvey.selected) {\n                            if (nextSurveyId && typeof op === 'object') {\n                                setBoxChecked((state) => [...state, op.option + nextSurveyId])\n                            }\n                        }\n                    } else setSelectedOption([])\n                    // 簡答題\n                } else {\n                    if (selected.length > 0) {\n                        setTextAnswer(selected[0].sendingSurvey.selected as string)\n                    } else setTextAnswer('')\n                }\n            } else setSelectedOption([])\n\n            setRestPostSurveyPage((state: number) => state + 1)\n        }\n    }\n\n    /**\n     * 回復至上一題\n     * @param prevSurveyId\n     * @param type\n     * @param surveyId\n     * @param prevType\n     */\n    const handlePrev = (prevSurveyId: string, prevType: string, surveyId: string, type: string, category: string) => {\n        // 找到前一題\n        const [prevSelected] = resultRef.current.filter((s) => s.sendingSurvey.surveyId === prevSurveyId)\n        // 刪除本題本來結果\n        resultRef.current = resultRef.current.filter((r) => r.sendingSurvey.surveyId !== surveyId)\n        // 加入本題更新後結果\n        if (selectedOption.length > 0 || textAnswer.length > 0) handleAddResult(surveyId, category, type, false)\n        // 刪除本題選中選項\n        if (type === 'single' || type === 'multiple')\n            setBoxChecked((state) => state.filter((s) => !s.includes(surveyId)))\n        else setTextAnswer('')\n\n        // 放入前一題選中選項\n        if (prevType === 'single' || prevType === 'multiple')\n            setSelectedOption(prevSelected.sendingSurvey.selected as any[])\n        else setTextAnswer(prevSelected.sendingSurvey.selected as string)\n\n        setRestPostSurveyPage((state: number) => state - 1)\n    }\n\n    return (\n        <div className=\"after-event-survey-wrap scroll-Control\">\n            <Button onClick={() => { document.body.clientWidth > 700 ? navigate('/mergeImg') : navigate('/phoneMergeImg') }}>合成图片</Button>\n            {postSurveyShow && postSurveys && postSurveys.length > 0 ? (\n                <>\n                    {userPostSurveys ? (\n                        <>\n                            {showUnlockResult ? (\n                                <div className=\"after-event-survey-unlock\">\n                                    <img src={Links.UNLOCK} alt=\"unlock\" />\n                                </div>\n                            ) : (\n                                <div className=\"after-event-survey-unlock-result\">\n                                    <div className=\"after-event-survey-unlock-result-text\">\n                                        {intl.formatMessage({ id: 'main.UnlockMessage' })}\n                                    </div>\n                                </div>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            {restPostSurveyPage === 0 ? (\n                                <div className=\"after-event-startBox\">\n                                    <div className=\"after-event-title\">\n                                        {intl.formatMessage({ id: 'main.PostSurveyStartMessage' })}\n                                    </div>\n                                    <Button className=\"after-event-survey-prev-btn\" onClick={handleSurveyStart}>\n                                        {intl.formatMessage({ id: 'main.PostSurveyStart' })}\n                                    </Button>\n                                </div>\n                            ) : (\n                                <>\n                                    <div className=\"after-event-Question\">\n                                        {(postSurveys as Survey[])[restPostSurveyPage - 1].subject}\n                                    </div>\n                                    <div className=\"after-event-survey-body\">\n                                        {(postSurveys as Survey[])[restPostSurveyPage - 1].type === 'single' ||\n                                            (postSurveys as Survey[])[restPostSurveyPage - 1].type === 'multiple' ? (\n                                            <div className=\"after-event-survey-options\">\n                                                {(postSurveys as Survey[])[restPostSurveyPage - 1]?.options.map(\n                                                    (option) => (\n                                                        <div key={option.option} className=\"after-event-survey-option\">\n                                                            <input\n                                                                id={option.option}\n                                                                type=\"checkbox\"\n                                                                className=\"after-event-survey-checkbox\"\n                                                                checked={boxChecked.includes(\n                                                                    option.option +\n                                                                    (postSurveys as Survey[])[\n                                                                        restPostSurveyPage - 1\n                                                                    ].surveyId\n                                                                )}\n                                                                onChange={() =>\n                                                                    handleOptionClick(\n                                                                        {\n                                                                            option: option.option,\n                                                                            type: (postSurveys as Survey[])[\n                                                                                restPostSurveyPage - 1\n                                                                            ].type,\n                                                                        },\n                                                                        (postSurveys as Survey[])[\n                                                                            restPostSurveyPage - 1\n                                                                        ].surveyId\n                                                                    )\n                                                                }\n                                                            />\n                                                            <label\n                                                                htmlFor={option.option}\n                                                                className=\"after-event-survey-label\"\n                                                                onChange={() =>\n                                                                    handleOptionClick(\n                                                                        {\n                                                                            option: option.option,\n                                                                            type: (postSurveys as Survey[])[\n                                                                                restPostSurveyPage - 1\n                                                                            ].type,\n                                                                        },\n                                                                        (postSurveys as Survey[])[\n                                                                            restPostSurveyPage - 1\n                                                                        ].surveyId\n                                                                    )\n                                                                }\n                                                                role=\"presentation\"\n                                                            >\n                                                                {option.option}\n                                                            </label>\n                                                        </div>\n                                                    )\n                                                )}\n                                            </div>\n                                        ) : (\n                                            <div className=\"after-event-survey-textarea-box\">\n                                                <TextArea\n                                                    className=\"after-event-survey-textarea\"\n                                                    value={textAnswer}\n                                                    onChange={(e) => setTextAnswer(e.target.value)}\n                                                    placeholder={intl.formatMessage({\n                                                        id: 'main.PostSurveyTextPlaceholder',\n                                                    })}\n                                                />\n                                            </div>\n                                        )}\n\n                                        <div className=\"after-event-survey-btn-group\">\n                                            {restPostSurveyPage - 1 < (postSurveys as Survey[]).length - 1 && (\n                                                <Button\n                                                    disabled={nextDisabled}\n                                                    className=\"after-event-survey-next-btn\"\n                                                    type=\"primary\"\n                                                    onClick={() =>\n                                                        handleNext(\n                                                            (postSurveys as Survey[])[restPostSurveyPage - 1].surveyId,\n                                                            (postSurveys as Survey[])[restPostSurveyPage - 1].category,\n                                                            (postSurveys as Survey[])[restPostSurveyPage - 1].type,\n                                                            '_next',\n                                                            (postSurveys as Survey[])[restPostSurveyPage].surveyId,\n                                                            (postSurveys as Survey[])[restPostSurveyPage].type\n                                                        )\n                                                    }\n                                                >\n                                                    {intl.formatMessage({ id: 'main.Next' })}\n                                                </Button>\n                                            )}\n                                            {restPostSurveyPage - 1 === (postSurveys as Survey[]).length - 1 && (\n                                                <Button\n                                                    disabled={nextDisabled}\n                                                    type=\"primary\"\n                                                    className=\"after-event-survey-submit-btn\"\n                                                    onClick={() =>\n                                                        handleNext(\n                                                            (postSurveys as Survey[])[restPostSurveyPage - 1].surveyId,\n                                                            (postSurveys as Survey[])[restPostSurveyPage - 1].category,\n                                                            (postSurveys as Survey[])[restPostSurveyPage - 1].type,\n                                                            '_submit'\n                                                        )\n                                                    }\n                                                >\n                                                    {intl.formatMessage({ id: 'main.Finish' })}\n                                                </Button>\n                                            )}\n                                            {restPostSurveyPage - 1 > 0 && (\n                                                <Button\n                                                    className=\"after-event-survey-prev-btn\"\n                                                    onClick={() =>\n                                                        handlePrev(\n                                                            (postSurveys as Survey[])[restPostSurveyPage - 2].surveyId,\n                                                            (postSurveys as Survey[])[restPostSurveyPage - 2].type,\n                                                            (postSurveys as Survey[])[restPostSurveyPage - 1].surveyId,\n                                                            (postSurveys as Survey[])[restPostSurveyPage - 1].type,\n                                                            (postSurveys as Survey[])[restPostSurveyPage - 1].category\n                                                        )\n                                                    }\n                                                >\n                                                    {intl.formatMessage({ id: 'main.PostSurveyPrevious' })}\n                                                </Button>\n                                            )}\n                                        </div>\n                                    </div>\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            ) : (\n                <div className=\"after-event-survey-before-start-text\">\n                    {intl.formatMessage({ id: 'main.PostSurveyBefore' })}\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default AfterEventSurvey\n","import React, {\n    useState,\n    useEffect,\n    FC,\n    useContext,\n    useRef,\n    useCallback,\n    RefObject,\n    KeyboardEvent,\n    Dispatch,\n    SetStateAction,\n    MouseEvent,\n} from 'react'\nimport { Routes, Route, useNavigate } from 'react-router-dom'\nimport xss from 'xss'\nimport { ObjectID } from 'bson'\nimport SwagDrawing from './swag/SwagDrawing'\nimport { useIntl } from 'react-intl'\nimport {useDispatch, useSelector} from 'react-redux'\n\nimport { getScore, getSurveys} from '../../../store/mainSlice'\nimport Chatroom from '../chatroom/Chatroom'\n// import QuestionSec from '../questionSec/QuestionSec'\nimport NavigateBar from './NavigateBar'\nimport SurveySec from './SurveySec'\nimport PersonalScore from '../score/PersonalScore'\nimport LeaderBoard from '../score/LeaderBoard'\nimport {\n    deliverMessageToConsole,\n    /*  checkMiddleSurveyStatus, */ checkPostSurveyStatus,\n    receiveSurvey,\n} from '../../../lib/services'\nimport {\n    ReceiveChatbotEventData,\n    RaiseSurveyEventData,\n    ReceiveLucyDrawEventData,\n    ReceivePostSurveyGuidingEventData,\n    PostSurveyShowData,\n    LeaderBoardData,\n    // MiddleSurveyShowData,\n} from '../../../lib/socketDataTypes'\nimport { ModalContext, ModalProps } from '../Main'\nimport AfterEventSurvey from '../afterEventSurvey/AfterEventSurvey'\n// import DuringEventSurvey from '../duringEventSurvey/DuringEventSurvey'\nimport { Links } from '../../../utils/links'\n\nimport '../../../styles/interactive.scss'\nimport '../../../styles/luckyDrawTransition.scss'\n\nexport type MessageAndQuestionProps = {\n    handleSubmitMessage: (area: string, sticker?: string) => void\n    inputContent: string\n    type: string\n    handleInputKeyDown: (area: string, e: KeyboardEvent<HTMLTextAreaElement>) => void\n    setIsInputtingMandarin: Dispatch<SetStateAction<boolean>>\n    setInputContent: Dispatch<SetStateAction<string>>\n    messageInputRef: RefObject<HTMLTextAreaElement>\n}\n\ntype InteractiveSecProps = {\n    setChangeEvent: Dispatch<SetStateAction<boolean>>\n}\n\nconst INIT_REPLIED_DETAIL = {\n    replied_id: '',\n    repliedAvatar: '',\n    repliedName: '',\n    repliedContent: '',\n}\n\nexport type RepliedDetail = typeof INIT_REPLIED_DETAIL & { repliedIndex?: number }\n\nexport type LuckyDrawWinner = {\n    _id: string\n    code: string\n    company: string\n    name: string\n}\n\nexport type PostingResults = {\n    userId: string\n    userCode: string\n    eventId: string\n    sendingSurvey: {\n        category: string\n        surveyId: string\n        selected: any[] | string\n    }\n}\n\ntype MessageLocal = {\n    to: RepliedDetail | null | string\n    type: string\n    content: string\n    msgId: string\n    createTime: number\n    eventId: string\n    _id: string\n    name: string\n    avatar: string\n    company: string\n    googler: boolean\n    approved: boolean\n    helper: boolean\n    response?: any[]\n}\n\nconst InteractiveSec: FC<InteractiveSecProps> = ({ setChangeEvent }) => {\n    const messageInputRef = useRef<HTMLTextAreaElement>(null)\n    const currentSurveyRef = useRef<any>(null)\n    const timerRef = useRef<number>(0)\n    const resultRef = useRef<PostingResults[]>([])\n\n    const [isInputtingMandarin, setIsInputtingMandarin] = useState<boolean>(false)\n    const [inputContent, setInputContent] = useState<string>('')\n    const [surveyShow, setSurveyShow] = useState(false)\n    const [thanksShow, setThanksShow] = useState<'_post' | '_middle' | null>(null)\n    const [replied, setReplied] = useState(INIT_REPLIED_DETAIL)\n    const [luckyDrawWinner, setLuckyDrawWinner] = useState<LuckyDrawWinner[]>([])\n    const [luckyDrawAnimation, setLuckyDrawAnimation] = useState(false)\n   \n    const [restPostSurveyPage, setRestPostSurveyPage] = useState(0)\n    const [selectedOption, setSelectedOption] = useState<any[]>([])\n    const [textAnswer, setTextAnswer] = useState<string>('')\n    const [boxChecked, setBoxChecked] = useState<string[]>([])\n    const [showUnlockResult, setShowUnlockResult] = useState(false)\n    const [postSurveyShow, setPostSurveyShow] = useState(false)\n    const [showReply, setShowReply] = useState(false)\n    // const [middleSurveyStart, setMiddleSurveyStart] = useState(0)\n\n    const {\n        user: {\n            user: { _id, code, name, avatar, company, googler, eventId, helper, admin, whoSharedWalkin },\n            scoreDetail,\n            swag: { finishSwag },\n        },\n        // middleSurvey: { middleSurveys },\n        // result: { middleResult },\n    }:any = {user:{user:{},swag:{}}}\n\n    const intl = useIntl()\n\n    const { global }: any = useSelector(state => { return state });\n\n    const { socket, socketId, socketOn } = global\n\n    const { setShowModal, setModalContent } = useContext(ModalContext) as ModalProps\n\n\n    const navigate = useNavigate()\n\n    const dispatch = useDispatch()\n\n    //获取积分 排行 抽奖等\n    useEffect(() => {\n        dispatch(getScore)\n        dispatch(getSurveys())\n    },[])\n\n    /**\n     * 確認會後問卷開啟狀態\n     */\n    useEffect(() => {\n        async function checkStatus() {\n            const data = await checkPostSurveyStatus()\n            setPostSurveyShow(data)\n        }\n\n        checkStatus()\n    }, [])\n\n    /**\n     * 確認會後中卷開啟狀態\n     */\n    // useEffect(() => {\n    //     async function checkStatus() {\n    //         const data = await checkMiddleSurveyStatus()\n\n    //         setMiddleSurveyShow(data.middleSurveyShow)\n    //         setMiddleSurveyStart(data.timeStart)\n\n    //         if (data.middleSurveyShow) {\n    //             if (timerRef.current) window.clearTimeout(timerRef.current)\n    //             const now = new Date().getTime()\n    //             const timer = window.setTimeout(() => {\n    //                 onGetMiddleSurveyResult({ eventId })\n    //             }, data.timeStart + 100000 - now)\n    //             timerRef.current = timer\n    //         }\n    //     }\n\n    //     checkStatus()\n    // }, [])\n\n    /**\n     * 獲取該會場的所有會後問卷內容\n     */\n    useEffect(() => {\n        // onGetAllPostSurvey({ eventId })\n        // onGetAllMiddleSurvey({ eventId })\n    }, [eventId])\n\n    /**\n     * socket.io 監聽\n     */\n    useEffect(() => {\n        // 監聽通過審核的訊息\n        socket.on('deliverPassedSpeech', (data:any) => receivePassedSpeech(data))\n        // 監聽通過審核的問題\n        socket.on('deliverPassedQuestion', (data:any) => receivePassedQuestion(data))\n        // 監聽定時自動發送訊息\n        socket.on('sendChatbot', (data:any) => handleReceiveChatbotJob(data))\n        // 監聽定時幸運抽獎\n        socket.on('luckyDraw', (data:any) => handleReceiveLuckyDraw(data))\n        // 監聽定時自動導向會後問卷頁面\n        socket.on('postSurveyGuiding', (data:any) => handleReceivePostSurveyGuiding(data))\n        // 監聽定時自動發送問卷\n        socket.on('sendSurvey', (data:any) => handleReceiveRaiseSurveyJob(data))\n        // 監聽開關會後問卷\n        socket.on('postSurveyOpen', (data:any) => handlePostSurveyOpen(data))\n        // 監聽排行榜更新\n        socket.on('deliverLeaderBoard', (data:any) => handleLeaderBoardUpdate(data))\n        // 監聽用戶積極參與互動分數更新\n        socket.on('deliverUserScore', (data:any) => handleReceiveUserScore(data))\n\n\n        return () => {\n            socket.removeListener('deliverPassedSpeech')\n            socket.removeListener('deliverPassedQuestion')\n            socket.removeListener('sendChatbot')\n            socket.removeListener('luckyDraw')\n            socket.removeListener('postSurveyGuiding')\n            socket.removeListener('sendSurvey')\n            socket.removeListener('postSurveyOpen')\n            socket.removeListener('deliverLeaderBoard')\n            socket.removeListener('deliverUserScore')\n        }\n    }, [])\n\n    /**\n     * 接收用戶分數更新\n     */\n    const handleReceiveUserScore = (data: { userScore:  any }) => {\n        const { userScore } = data\n        // if (userScore) updateUserScoreDetail({ scoreDetail: userScore })\n    }\n\n    /**\n     * 接收分數排行榜更新\n     */\n    const handleLeaderBoardUpdate = (data: LeaderBoardData) => {\n        const { leaders } = data\n        // updateLeaderBoard({ leaders })\n    }\n\n    /**\n     * 開啟會後問卷\n     */\n    const handlePostSurveyOpen = ({ postSurveyShow, postsurveySlug }: PostSurveyShowData) => {\n        setPostSurveyShow(postSurveyShow)\n        if (postSurveyShow) navigate('/main/' + postsurveySlug)\n    }\n\n   \n\n    /**\n     * 處理會後問卷彈窗顯示\n     */\n    const handlePostSurveyJob = () => {\n        if (timerRef.current) window.clearTimeout(timerRef.current)\n\n        const timer = window.setTimeout(() => {\n            currentSurveyRef.current = null\n            setSurveyShow(false)\n        }, parseInt(process.env.REACT_APP_POST_SURVEY_WAITING_TIME as string))\n\n        timerRef.current = timer\n    }\n\n   \n\n    /**\n     * 接收問卷定時任務訊息後需觸發事件\n     * @param data 發送問卷資訊物件及該則任務 id\n     */\n    const handleReceiveRaiseSurveyJob = async (data: RaiseSurveyEventData) => {\n        const {\n            payload: { surveyData },\n            message,\n        } = data\n\n        if (!currentSurveyRef.current && Object.keys(surveyData).length > 0) {\n            console.log({ message })\n\n            currentSurveyRef.current = surveyData\n            setSurveyShow(true)\n\n            handlePostSurveyJob()\n\n            receiveSurvey({ code, currentEventId: eventId })\n            // onDeliverMiddleSurvey({ code, surveyId: surveyData.surveyId, socketId })\n        } else return\n    }\n\n    const handleCollectionAnswer = () => {\n        const options = (currentSurveyRef.current as any).options\n\n        const correct = options\n            .filter((option:any) => {\n                if (option.isAnswer || option.isAnswer === '1') {\n                    return option.option\n                }\n            })\n            .map((o:any) => o.option)\n        return correct\n    }\n\n    /**\n     * 提交問卷選擇項目\n     * @param selectedOption 用戶選擇選項陣列\n     * @param surveyData { _id: 用戶 id, category: 問卷類型 }\n     */\n    const handleSubmitSurveyAnswer = (\n        selectedOption: any[],\n        surveyData: { surveyId: string; category: string }\n    ) => {\n        if (selectedOption.length > 0) {\n            const correct = handleCollectionAnswer()\n            const sendingSurvey = { ...surveyData, selected: selectedOption, correct }\n\n            // onPostUserSurveyResult({ sendingSurvey, userId: _id, userCode: code, eventId, scoreDetail })\n\n            handleAfterSubmitSurveyAnswer()\n\n            // if (surveyData.category === 'post') handleAfterSubmitSurveyAnswer()\n            // else if (surveyData.category === 'middle') setThanksShow('_middle')\n        }\n    }\n\n    /**\n     * 會後問卷提交後顯示感謝填寫畫面，並設定該畫面自動關閉時間\n     */\n    const handleAfterSubmitSurveyAnswer = () => {\n        if (timerRef.current) window.clearTimeout(timerRef.current)\n\n        const timer = window.setTimeout(() => {\n            currentSurveyRef.current = null\n            setSurveyShow(false)\n            setThanksShow(null)\n        }, parseInt(process.env.REACT_APP_POST_SURVEY_THANKS_SHOWING_TIME as string))\n\n        setThanksShow('_post')\n        timerRef.current = timer\n    }\n\n    /**\n     * 接收聊天室自動訊息定時任務訊息後需觸發事件\n     * @param data chatbot 自動訊息 helper 資訊物件及該則任務 id\n     */\n    const handleReceiveChatbotJob = async (data: ReceiveChatbotEventData) => {\n        const {\n            payload: { helper, helperSpeech_id },\n            message,\n        } = data\n\n        console.log({ message })\n\n        handleSubmitChatbotMessage(message, helper, helperSpeech_id)\n    }\n\n    /**\n     * 接收幸運抽獎定時任務後需觸發事件\n     * @param data\n     */\n    const handleReceiveLuckyDraw = async (data: ReceiveLucyDrawEventData) => {\n        const {\n            payload: { win },\n            message,\n        } = data\n\n        console.log({ message })\n\n        if (timerRef.current) window.clearTimeout(timerRef.current)\n\n        const timer = window.setTimeout(() => {\n            setLuckyDrawAnimation(false)\n\n            window.setTimeout(() => {\n                setLuckyDrawWinner([])\n            }, parseInt(process.env.REACT_APP_LUCKY_DRAW_WINNER_SHOWING_TIME as string))\n        }, parseInt(process.env.REACT_APP_LUCKY_DRAW_ANIMATION_TIME as string))\n\n        setLuckyDrawAnimation(true)\n        setLuckyDrawWinner(win)\n        timerRef.current = timer\n    }\n\n    /**\n     * 接收導向會後問卷頁面定時任務後需觸發事件\n     * @param data\n     */\n    const handleReceivePostSurveyGuiding = async (data: ReceivePostSurveyGuidingEventData) => {\n        const { message } = data\n\n        console.log({ message })\n\n        navigate('/main/post')\n    }\n\n    /**\n     * 處理通過審核訊息，更新 chat state messages 陣列\n     * @param data 審核通過單則訊息物件\n     */\n    const receivePassedSpeech = (data: { approved: any }) => {\n        const { approved } = data\n\n        // updateLocalMessage(approved)\n    }\n\n    /**\n     * 處理通過審核問題，更新 question state questions 陣列\n     * @param data 審核通過單則問題物件\n     */\n    const receivePassedQuestion = (data:any) => {\n        // updateLocalQuestion(data)\n    }\n\n    /**\n     * 處理 Chatbot 訊息傳送至後台做審核\n     * @param message 訊息內容\n     * @param helper 是否為自動訊息\n     * @param helperSpeech_id chatbot helper id\n     * @returns\n     */\n    const handleSubmitChatbotMessage = async (\n        message: string,\n        helper: any,\n        helperSpeech_id: string\n    ) => {\n        if (message.length === 0) return\n\n        const msgId = new ObjectID(helperSpeech_id).toString()\n        const createTime = Date.now()\n\n        if (helper && helper._id) {\n            const { eventId, _id, name, avatar, company } = helper\n            const messageLocal = {\n                to: null,\n                type: 'text',\n                content: xss(message),\n                msgId,\n                createTime,\n                eventId,\n                _id,\n                name,\n                avatar,\n                company,\n                googler: true,\n                approved: true,\n                helper: true,\n                response: [],\n            }\n            const addLocal = handleAddToSelf(messageLocal)\n\n            // addLocal(addLocalMessage)\n        }\n    }\n\n    /**\n     * 將輸入訊息加入本地 state\n     */\n    const handleAddToSelf = (messageLocal: MessageLocal) => {\n        // const { to, type, msgId, content, createTime, response, approved } = messageLocal\n        // const from = {\n        //     _id: _id,\n        //     name,\n        //     avatar,\n        //     company,\n        //     googler,\n        //     helper,\n        // }\n\n        // let pkg: Message | Question\n        // const dispatchPkg = {\n        //     _id: msgId,\n        //     type,\n        //     content,\n        //     createTime,\n        //     approved,\n        //     from,\n        //     room: eventId,\n        //     to,\n        // }\n\n        // if (type === 'question' || type === 'response') {\n        //     pkg = {\n        //         ...dispatchPkg,\n        //         response,\n        //     } as Question\n        // } else pkg = dispatchPkg as Message\n\n        // return (addLocal: Dispatch<Message | Question>) => addLocal(pkg)\n    }\n\n    /**\n     * 傳送訊息至後台等待驗證\n     * @param userId 用戶 id\n     * @param to 回覆訊息，null 為全體\n     * @param msgId 訊息 id\n     * @param type 聊天室或提問區\n     * @param content 訊息內容\n     * @param createTime 訊息創建時間 timestamp\n     * @param eventId event id\n     * @returns 訊息 id\n     */\n    const handleSendMessage = async (\n        userId: string,\n        to: RepliedDetail | null,\n        msgId: string,\n        type: string,\n        content: string,\n        createTime: number,\n        eventId: string\n    ) => {\n        const error = await deliverMessageToConsole<string>(userId, to, msgId, type, eventId, content, createTime)\n        if (!error) {\n            const messageLocal = {\n                to,\n                type,\n                content: xss(content),\n                msgId,\n                createTime,\n                eventId,\n                _id,\n                name,\n                avatar,\n                company,\n                googler,\n                approved: false,\n                helper,\n                response: [],\n            }\n            const addLocal = handleAddToSelf(messageLocal)\n\n            // if (type === 'text') addLocal(addLocalMessage)\n            // else if (type === 'sticker') addLocal(addLocalMessage)\n            // else if (type === 'question' || type === 'response') addLocal(addLocalQuestion)\n\n            setReplied(INIT_REPLIED_DETAIL)\n            setShowReply(false)\n        } else {\n            setModalContent(error)\n            setShowModal(true)\n        }\n    }\n\n    /**\n     * 處理輸入框訊息傳送\n     * @param type 聊天室\n     */\n    const handleSubmitMessage = (type: string, sticker?: string) => {\n        if (!socketOn) {\n            setModalContent(intl.formatMessage({ id: 'main.FAIL_TO_SEND_MSG' }))\n            setShowModal(true)\n        }\n        let message = ''\n\n        if (type === 'sticker' && sticker) message = sticker.trim()\n        else message = (messageInputRef.current as HTMLTextAreaElement).value.trim()\n\n        if (message.length === 0) return\n\n        const msgId = new ObjectID().toString()\n        const createTime = Date.now()\n\n        let to: null | RepliedDetail = null\n        if (replied.replied_id.length > 0) to = replied\n\n        message = message.replace(/\\n|\\r\\n/g, '<br>')\n\n        handleSendMessage(_id, to, msgId, type, xss(message), createTime, eventId)\n\n        if (type !== 'sticker') {\n            if (messageInputRef.current) messageInputRef.current.value = ''\n            setInputContent('')\n        }\n\n        if (messageInputRef && messageInputRef.current) messageInputRef.current.focus()\n    }\n\n    /**\n     * 處理輸入框訊息傳送\n     * @param type 提問區\n     */\n    // const handleResponseSubmit = (type: string, response: string, repliedDetail: RepliedDetail) => {\n    //     if (!socketOn) {\n    //         setModalContent(intl.formatMessage({ id: 'main.FAIL_TO_SEND_MSG' }))\n    //         setShowModal(true)\n    //     }\n\n    //     const message = response.trim()\n\n    //     if (message.length === 0) return\n\n    //     const msgId = new ObjectID().toString()\n    //     const createTime = Date.now()\n\n    //     handleSendMessage(_id, repliedDetail, msgId, type, xss(message), createTime, eventId)\n    // }\n\n    /**\n     * 處理訊息傳送鍵盤事件\n     * @param type 聊天室或提問區\n     * @param e\n     */\n    const handleInputKeyDown = (type: string, e: KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === 'Tab') e.preventDefault()\n        else if (e.key == 'Enter' && !e.shiftKey && !isInputtingMandarin) {\n            e.preventDefault()\n            handleSubmitMessage(type)\n        }\n    }\n\n    /**\n     * 點擊回覆訊息按鈕\n     * @param param0\n     */\n    const handleReplyMessageClick = useCallback(\n        ({ replied_id, repliedAvatar, repliedName, repliedContent }: RepliedDetail) => {\n            setReplied({ replied_id, repliedAvatar, repliedName, repliedContent })\n            setShowReply(true)\n        },\n        []\n    )\n\n    /**\n     * 關閉回覆訊息區塊\n     */\n    const handleRepliedDetailClose = useCallback(() => {\n        setReplied(INIT_REPLIED_DETAIL)\n        setShowReply(false)\n    }, [])\n\n    /**\n     * 處理貼圖訊息發送\n     * @param e\n     */\n    const handleSendSticker = (e: MouseEvent) => {\n        const stickerLink = (e.target as HTMLImageElement).src\n        handleSubmitMessage('sticker', stickerLink)\n    }\n\n    /**\n     * 處理插入 emoji\n     * @param emoji\n     */\n    const handleInsertEmoji = (emoji: string) => {\n        const $input = messageInputRef.current as HTMLTextAreaElement\n\n        if ($input.selectionStart || $input.selectionStart === 0) {\n            const startPos = $input.selectionStart\n            const endPos = $input.selectionEnd\n            const restoreTop = $input.scrollTop\n\n            $input.value =\n                $input.value.substring(0, startPos) +\n                emoji +\n                $input.value.substring(endPos as number, $input.value.length)\n            setInputContent($input.value)\n            if (restoreTop > 0) $input.scrollTop = restoreTop\n\n            $input.selectionStart = startPos + emoji.length\n            $input.selectionEnd = startPos + emoji.length\n            $input.focus()\n        } else {\n            $input.value += emoji\n            setInputContent($input.value)\n            $input.focus()\n        }\n    }\n\n    /**\n     * 處理 emoji 訊息發送\n     * @param e\n     */\n    const handleSendEmoji = (e: MouseEvent) => {\n        const { name } = (e.target as HTMLButtonElement).dataset\n        if (name) handleInsertEmoji(`${name}`)\n    }\n\n    // lucky draw\n    const luckyWinner = luckyDrawAnimation ? (\n        <div className=\"interactive-lucky-draw-animation\">\n            <img src={Links.LUCKY_DRAW} alt=\"lucky draw\" />\n        </div>\n    ) : (\n        <div className=\"interactive-lucky-draw-winner\">\n            <div className=\"interactive-lucky-draw-winner-container\">\n                <h2>Congratulations</h2>\n                <div className=\"interactive-lucky-draw-winner-body\">\n                    {luckyDrawWinner.map((winner) => {\n                        return (\n                            <div key={winner._id} className=\"interactive-lucky-draw-winner-item\">\n                                <div className=\"interactive-lucky-draw-winner-item-name\">{winner.name}</div>\n                                <div className=\"interactive-lucky-draw-winner-item-company\">{winner.company}</div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        </div>\n    )\n\n    return (\n        <div className=\"interactive-wrap\">\n            {luckyDrawWinner && luckyDrawWinner.length > 0 ? (\n                <>{luckyWinner}</>\n            ) : (\n                <>\n                    <NavigateBar setChangeEvent={setChangeEvent} />\n                    <div className=\"interactive-routers-wrap\" style={{ overflow: 'scroll' }}>\n                        {!(helper || admin || googler || whoSharedWalkin) && !finishSwag && <SwagDrawing />}\n                        {surveyShow && (\n                            <SurveySec\n                                thanksShow={thanksShow}\n                                currentSurveyRef={currentSurveyRef}\n                                handleSubmitSurveyAnswer={handleSubmitSurveyAnswer}\n                            />\n                        )}\n                        <Routes>\n                            <Route\n                                path=\"/\"\n                                element={\n                                    <Chatroom\n                                        messageInputRef={messageInputRef}\n                                        handleSubmitMessage={handleSubmitMessage}\n                                        handleInputKeyDown={handleInputKeyDown}\n                                        setIsInputtingMandarin={setIsInputtingMandarin}\n                                        setInputContent={setInputContent}\n                                        inputContent={inputContent}\n                                        type=\"text\"\n                                        handleReplyMessageClick={handleReplyMessageClick}\n                                        handleRepliedDetailClose={handleRepliedDetailClose}\n                                        replied={replied}\n                                        showReply={showReply}\n                                        handleSendSticker={handleSendSticker}\n                                        handleSendEmoji={handleSendEmoji}\n                                    />\n                                }\n                            />\n                            <Route\n                                path=\"/post\"\n                                element={\n                                    <AfterEventSurvey\n                                        restPostSurveyPage={restPostSurveyPage}\n                                        setRestPostSurveyPage={setRestPostSurveyPage}\n                                        setShowUnlockResult={setShowUnlockResult}\n                                        showUnlockResult={showUnlockResult}\n                                        resultRef={resultRef}\n                                        selectedOption={selectedOption}\n                                        setSelectedOption={setSelectedOption}\n                                        textAnswer={textAnswer}\n                                        setTextAnswer={setTextAnswer}\n                                        boxChecked={boxChecked}\n                                        setBoxChecked={setBoxChecked}\n                                        postSurveyShow={postSurveyShow}\n                                    />\n                                }\n                            />\n                            <Route path=\"/score\" element={<PersonalScore />} />\n                            <Route path=\"/leaders\" element={<LeaderBoard />} />\n                            {/* <Route\n                                path=\"/middle\"\n                                element={\n                                    <DuringEventSurvey\n                                        restMiddleSurveyPage={restMiddleSurveyPage}\n                                        setRestMiddleSurveyPage={setRestMiddleSurveyPage}\n                                        duringEventResultRef={duringEventResultRef}\n                                        duringEventSelectedOption={duringEventSelectedOption}\n                                        setDuringEventSelectedOption={setDuringEventSelectedOption}\n                                        duringEventTextAnswer={duringEventTextAnswer}\n                                        setDuringEventTextAnswer={setDuringEventTextAnswer}\n                                        duringEventBoxChecked={duringEventBoxChecked}\n                                        setDuringEventBoxChecked={setDuringEventBoxChecked}\n                                        middleSurveyShow={middleSurveyShow}\n                                        middleSurveyStart={middleSurveyStart}\n                                    />\n                                }\n                            /> */}\n                            {/* <Route\n                                path=\"/qs\"\n                                element={\n                                    <QuestionSec\n                                        messageInputRef={messageInputRef}\n                                        handleSubmitMessage={handleSubmitMessage}\n                                        handleInputKeyDown={handleInputKeyDown}\n                                        setIsInputtingMandarin={setIsInputtingMandarin}\n                                        setInputContent={setInputContent}\n                                        inputContent={inputContent}\n                                        type=\"question\"\n                                        handleRepliedDetailClose={handleRepliedDetailClose}\n                                        replied={replied}\n                                        showReply={showReply}\n                                        handleResponseSubmit={handleResponseSubmit}\n                                    />\n                                }\n                            /> */}\n                        </Routes>\n                    </div>\n                </>\n            )}\n        </div>\n    )\n}\n\nexport default InteractiveSec\n","import React, { FC, memo } from 'react'\nimport { useIntl } from 'react-intl'\n\ntype AgendaItemProps = {\n    symbols: string[]\n    eventId: string\n    current: 'current' | null\n    topic: string\n}\nconst AgendaItem: FC<AgendaItemProps> = ({ current, eventId, symbols, topic }) => {\n    const intl = useIntl()\n\n    return (\n        <div className={current ? 'main-agenda-slide-item-current' : 'main-agenda-slide-item'}>\n            <div className={current ? 'main-agenda-slide-item-time-current' : 'main-agenda-slide-item-time'}>\n                <span>\n                    {intl.formatMessage({\n                        id: `${eventId}_agenda_${`${topic}_1`}.Local Time From`,\n                    })}\n                </span>\n                <span> - </span>\n                <span>\n                    {intl.formatMessage({\n                        id: `${eventId}_agenda_${`${topic}_1`}.Local Time Ends`,\n                    })}\n                </span>\n            </div>\n            <div className=\"main-agenda-slide-item-topic\">\n                <span>\n                    {intl.formatMessage({\n                        id: `${eventId}_agenda_${`${topic}_1`}.Topic`,\n                    })}\n                </span>\n            </div>\n            <div className=\"main-agenda-slide-item-speaker\">\n                <div className=\"main-agenda-slide-img-container\">\n                    <img\n                        className=\"main-agenda-slide-img\"\n                        src={intl.formatMessage({\n                            id: `${eventId}_agenda_${`${topic}_1`}.Img Url`,\n                        })}\n                        alt={`${topic}_1`}\n                    />\n                </div>\n                <div className=\"main-agenda-slide-content\">\n                    <div className=\"main-agenda-slide-content-name\">\n                        {intl.formatMessage({\n                            id: `${eventId}_agenda_${`${topic}_1`}.Speaker Name`,\n                        })}\n                    </div>\n                </div>\n                {symbols.includes(`${topic}_2`) && (\n                    <>\n                        <div className=\"main-agenda-slide-img-container\">\n                            <img\n                                className=\"main-agenda-slide-img\"\n                                src={intl.formatMessage({\n                                    id: `${eventId}_agenda_${`${topic}_2`}.Img Url`,\n                                })}\n                                alt={`${topic}_2`}\n                            />\n                        </div>\n                        <div className=\"main-agenda-slide-content\">\n                            <div className=\"main-agenda-slide-content-name\">\n                                {intl.formatMessage({\n                                    id: `${eventId}_agenda_${`${topic}_2`}.Speaker Name`,\n                                })}\n                            </div>\n                        </div>\n                    </>\n                )}\n                {symbols.includes(`${topic}_3`) && (\n                    <>\n                        <div className=\"main-agenda-slide-img-container\">\n                            <img\n                                className=\"main-agenda-slide-img\"\n                                src={intl.formatMessage({\n                                    id: `${eventId}_agenda_${`${topic}_3`}.Img Url`,\n                                })}\n                                alt={`${topic}_3`}\n                            />\n                        </div>\n                        <div className=\"main-agenda-slide-content\">\n                            <div className=\"main-agenda-slide-content-name\">\n                                {intl.formatMessage({\n                                    id: `${eventId}_agenda_${`${topic}_3`}.Speaker Name`,\n                                })}\n                            </div>\n                        </div>\n                    </>\n                )}\n                {symbols.includes(`${topic}_4`) && (\n                    <>\n                        <div className=\"main-agenda-slide-img-container\">\n                            <img\n                                className=\"main-agenda-slide-img\"\n                                src={intl.formatMessage({\n                                    id: `${eventId}_agenda_${`${topic}_4`}.Img Url`,\n                                })}\n                                alt={`${topic}_4`}\n                            />\n                        </div>\n                        <div className=\"main-agenda-slide-content\">\n                            <div className=\"main-agenda-slide-content-name\">\n                                {intl.formatMessage({\n                                    id: `${eventId}_agenda_${`${topic}_4`}.Speaker Name`,\n                                })}\n                            </div>\n                        </div>\n                    </>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default memo(AgendaItem)\n","import React, { FC, useEffect, useContext, Fragment, RefObject, memo } from 'react'\nimport Slider from 'react-slick'\n\n// import { useTypedSelector, useActions } from '../../../hooks'\nimport { localeContext, LocaleProps } from '../../../index'\nimport { handleGetTopics, handleGetSymbols } from '../../../lib/fn'\nimport AgendaItem from './AgendaItem'\n\ntype AgendaProps = {\n    sliderRef: RefObject<HTMLDivElement>\n}\n\nconst Agenda: FC<AgendaProps> = ({ sliderRef }) => {\n    const { jsonData } = useContext(localeContext) as LocaleProps\n\n    const {\n        user: {\n            user: { eventId },\n        },\n        agenda: { agenda=[], symbols, current },\n    }:any = {user:{user:{}},agenda:{}}\n\n\n    /**\n     * 初始化 agenda 清單\n     */\n    useEffect(() => {\n        if (eventId) {\n            if (!agenda || agenda.length <= 0) {\n                const topicVals = handleGetTopics(eventId, jsonData)\n                // initAgenda({ agenda: [...new Set(topicVals)] })\n            }\n\n            const symbols = handleGetSymbols(eventId, jsonData)\n            // initSymbols({ symbols: [...new Set(symbols)] })\n        } else return\n    }, [eventId, agenda.length])\n\n    // slick config\n    const settings = {\n        dots: false,\n        infinite: false,\n        speed: 800,\n        slidesToShow: 3,\n        slidesToScroll: 3,\n        initialSlide: 0,\n\n        responsive: [\n            {\n                breakpoint: 1800,\n                settings: {\n                    slidesToShow: 3,\n                    slidesToScroll: 3,\n                    infinite: false,\n                    initialSlide: 0,\n                    dots: false,\n                    arrows: true,\n                },\n            },\n            {\n                breakpoint: 1300,\n                settings: {\n                    slidesToShow: 2,\n                    slidesToScroll: 2,\n                    infinite: false,\n                    initialSlide: 0,\n                    dots: false,\n                    arrows: true,\n                },\n            },\n            {\n                breakpoint: 1000,\n                settings: {\n                    slidesToShow: 1,\n                    slidesToScroll: 1,\n                    autoplay: false,\n                    swipe: true,\n                    infinite: false,\n                    initialSlide: 0,\n                    dots: false,\n                    arrows: true,\n                },\n            },\n        ],\n    }\n\n    return (\n        <Slider {...settings} className=\"main-agenda-slide\" ref={sliderRef}>\n            {agenda && agenda.length > 0\n                ? ['1', '2', '3', '4', '5', '6', '7', '8', '9'].map((topic, i) => {\n                      return (\n                          <Fragment key={topic}>\n                              <AgendaItem\n                                  symbols={symbols}\n                                  topic={topic as string}\n                                  eventId={eventId}\n                                  current={i === current ? 'current' : null}\n                              />\n                          </Fragment>\n                      )\n                  })\n                : null}\n        </Slider>\n    )\n}\n\nexport default memo(Agenda)\n","import React, { FC } from 'react'\n\nimport '../../styles/socketHint.scss'\n\ntype SocketHintProps = {\n    socketOn: boolean\n}\n\nconst SocketHint: FC<SocketHintProps> = ({ socketOn }) => {\n    return <> {socketOn ? null : <div id=\"socket-hint\"></div>}</>\n}\n\nexport default SocketHint\n","import React, {\n    FC,\n    SetStateAction,\n    Dispatch,\n    useContext,\n    useEffect,\n    useRef,\n    ReactNode /* , MutableRefObject  */,\n} from 'react'\nimport { /* Select,  */ Button } from 'antd'\nimport { /* useNavigate,  */ useLocation } from 'react-router-dom'\nimport { useIntl } from 'react-intl'\nimport {useSelector} from 'react-redux'\n\nimport { userLocate } from '../../../lib/services'\nimport SocketHint from '../../../components/ui/SocketHint'\n\nimport { icons } from '../../../lib/icons'\nimport { LandingPageImages } from '../../../utils/links'\nimport FAQ from '../../landingPage/faq/FAQ'\n\n\n\ntype HeaderNavProps = {\n    changeEvent: boolean\n    setChangeEvent: Dispatch<SetStateAction<boolean>>\n    setShowModal: Dispatch<SetStateAction<boolean>>\n    handleClickSharedWalkin(): void\n    onlineUsers: number\n    setModalContent: Dispatch<SetStateAction<ReactNode>>\n    handleClickScoreRules(): void\n    handleClickGroupChatDescription(): void\n}\n\nconst HeaderNav: FC<HeaderNavProps> = ({\n    changeEvent,\n    handleClickSharedWalkin,\n    onlineUsers,\n    setShowModal,\n    setModalContent,\n    handleClickScoreRules,\n    handleClickGroupChatDescription,\n}) => {\n    const location = useLocation()\n\n    const intl = useIntl()\n\n    const { global }: any = useSelector(state => { return state });\n\n    const { socket, socketId, socketOn } = global\n\n    const {\n        user: {\n            user: { eventId, name, avatar, code, _id, admin },\n        },\n    }:any = {user:{user:{}}}\n\n    const eventRef = useRef(eventId)\n\n    // const { onPostSwitchEventId, initAgenda, initSymbols, switchEvent } = useActions()\n\n    /**\n     * 判斷用戶所在頁面，更新後台 user list 資訊\n     */\n    useEffect(() => {\n        // changeEvent 為 false 表示單純在同個會場內做頁面切換\n        if (!changeEvent) {\n            if (location.pathname === '/main') {\n                userLocate(eventId, socketId, code, 'chatroom')\n            } else if (location.pathname === '/main/qs') {\n                userLocate(eventId, socketId, code, 'qs')\n            } else if (location.pathname === '/main/post') {\n                userLocate(eventId, socketId, code, 'post')\n            }\n        } else {\n            // changeEvent 為 true 表示會場切換\n            userLocate(eventRef.current, socketId, code, 'changeEvent')\n        }\n    }, [location.pathname, changeEvent])\n\n    /**\n     * 紀錄更換會場前的 event id，用戶更換會場時使用\n     */\n    useEffect(() => {\n        eventRef.current = eventId\n    }, [eventId])\n\n    /**\n     * 從 event 物件返回該場活動的 channel id\n     * @param eventId\n     * @returns\n     */\n    // const handleFindChannelId = (eventId: string) => {\n    //     const [currentEvent] = event.filter((e) => e.eventId === eventId)\n    //     return currentEvent\n    // }\n\n    /**\n     * 處理語言切換，sea 專用\n     * @param lang\n     * @param pre\n     */\n    // const handleChangeEventLang = (lang: string, pre: string) => {\n    //     const [, event] = eventId.split('-')\n    //     const updatedEventId = `${lang}-${event}`\n    //     const ev = handleFindChannelId(updatedEventId)\n    //     userSwitchEvent(pre, `${lang}-${event}`, code, socketId)\n    //     onPostSwitchEventId({ updatedEventId, channelId: ev.channelId, _id })\n    //     navigate(`/main`, { replace: true })\n    // }\n\n    /**\n     * 選擇語言的 selector handler，目的為改變 url 至選取的語言\n     */\n    // const handleChangeLang = (v: string) => {\n    //     setChangeEvent(true)\n    //     const pre = eventId\n\n    //     if (v === 'en') handleChangeEventLang('SE', pre)\n    //     else if (v === 'id') handleChangeEventLang('SI', pre)\n    //     else if (v === 'vi') handleChangeEventLang('SV', pre)\n    //     else if (v === 'th') handleChangeEventLang('ST', pre)\n    // }\n\n    /**\n     * 切換同服務內不同會場。admin 專用\n     * @param v\n     */\n    // const handleChangeEvent = (v: string) => {\n    //     const ev = handleFindChannelId(v)\n    //     switchEvent({ eventId: v, channelId: ev.channelId })\n\n    //     const symbols = handleGetSymbols(v, jsonData)\n    //     initSymbols({ symbols: [...new Set(symbols)] })\n\n    //     const topicVals = handleGetTopics(v, jsonData)\n    //     initAgenda({ agenda: [...new Set(topicVals)] })\n\n    //     setChangeEvent(true)\n    //     const pre = eventId\n    //     userSwitchEvent(pre, v, code, socketId)\n\n    //     onPostSwitchEventId({ updatedEventId: v, channelId: ev.channelId, _id })\n    //     navigate(`/main`, { replace: true })\n    // }\n\n    const handleFaqShow = () => {\n        setModalContent(<FAQ />)\n        setShowModal(true)\n    }\n\n    return (\n        <nav className=\"main-layout-header\">\n            <SocketHint socketOn={socketOn} />\n            <div className=\"main-header-logo\">\n                <img className=\"google-svg\" src={LandingPageImages.EVENT_GOOGLE_TITLE} alt=\"Google\" />\n            </div>\n            <div className=\"main-header-right\">\n                <div style={{ display: 'none' }}>目前同时在线人数 {onlineUsers}</div>\n                <div className=\"main-header-user-detail\">\n                    <div className=\"main-header-user-avatar\">\n                        <img src={avatar} alt=\"user-avatar\" />\n                    </div>\n                    <div className=\"main-header-user-name\">{name}</div>\n                </div>\n                <Button className=\"main-header-faqBtn\" onClick={handleFaqShow}>\n                    {icons.faq_icon()}\n                    {intl.formatMessage({ id: 'landingPage.nav_faq' })}\n                </Button>\n                <Button className=\"main-header-faqBtn\" onClick={handleClickScoreRules}>\n                    {icons.rule_icon()}\n                    {intl.formatMessage({ id: 'landingPage.nav_score_rules' })}\n                </Button>\n\n                <Button className=\"main-header-faqBtn\" onClick={handleClickGroupChatDescription}>\n                    {icons.chat_icon()}\n                    {intl.formatMessage({ id: 'landingPage.nav_groupchat' })}\n                </Button>\n                {/* {admin && (\n                    <Button className=\"main-header-admin-share-walkin-btn\" onClick={handleClickSharedWalkin}>\n                        {intl.formatMessage({ id: 'main.ShareWalkin' })}\n                    </Button>\n                )} */}\n\n                {/* {admin && (\n                    <div className=\"main-header-admin-selector-container\">\n                        <Select\n                            dropdownClassName=\"main-admin-selector\"\n                            defaultValue={eventId}\n                            bordered={false}\n                            defaultActiveFirstOption={false}\n                            onChange={(v) => handleChangeEvent(v)}\n                        >\n                            {event.map((e) => {\n                                return (\n                                    <Option key={e.eventId} value={e.eventId}>\n                                        {e.name}\n                                    </Option>\n                                )\n                            })}\n                        </Select>\n                    </div>\n                )} */}\n\n                {/* {!admin && eventId.startsWith('S') && (\n                    <div className=\"main-header-lang-selector-container\">\n                        <Select\n                            dropdownClassName=\"main-lang-selector\"\n                            defaultValue={locale}\n                            bordered={false}\n                            defaultActiveFirstOption={false}\n                            onChange={(v) => handleChangeLang(v)}\n                        >\n                            {SelectorOptions.map((option) => {\n                                return (\n                                    <Option key={option.value} value={option.value}>\n                                        {option.option}\n                                    </Option>\n                                )\n                            })}\n                        </Select>\n                    </div>\n                )} */}\n            </div>\n        </nav>\n    )\n}\n\nexport default HeaderNav\n","import React, { FC } from 'react'\nimport { useIntl } from 'react-intl'\nimport { Button, Input } from 'antd'\n\n// import { useTypedSelector } from '../../../hooks/useTypedSelector'\n\nconst { TextArea } = Input\n\ntype ShareWalkinProps = {\n    handlePostSharedWalkin(): void\n}\n\nconst ShareWalkin: FC<ShareWalkinProps> = ({ handlePostSharedWalkin }) => {\n    const intl = useIntl()\n\n    const {\n        googler: {\n            walkin: { code: walkinCode },\n        },\n    }:any = {}\n\n    const textVal = `尊敬的嘉宾，诚挚地邀请您参与本次 ${\n        process.env.REACT_APP_EVENT_NAME\n    } . \\n\\n您的邀请码为：${walkinCode} 请用此链接登入：${\n        process.env.NODE_ENV === 'development'\n            ? `http://localhost:3000/#/${process.env.REACT_APP_DEFAULT_EVENT_ID}`\n            : `${process.env.REACT_APP_SERVER_BASE_URL_PROD}#/${process.env.REACT_APP_DEFAULT_EVENT_ID}`\n    }?uid=${walkinCode} \\n\\n期待您参与！`\n\n    return (\n        <div className=\"main-share-walkin-modal\">\n            <h4>{intl.formatMessage({ id: 'main.ShareWalkinHead' })}</h4>\n            <h6>{intl.formatMessage({ id: 'main.ShareWalkinSubHead' })}</h6>\n            <Input.Group compact>\n                <TextArea style={{ width: '100%', height: '180px' }} value={textVal} disabled={true} />\n            </Input.Group>\n            <div className=\"main-share-walkin-modal-btn-gp\">\n                <Button onClick={handlePostSharedWalkin}>\n                    {intl.formatMessage({ id: 'main.ShareWalkinBtnCreate' })}\n                </Button>\n\n                <Button onClick={() => navigator.clipboard.writeText(textVal)}>\n                    {intl.formatMessage({ id: 'main.ShareWalkinBtnShare' })}\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default ShareWalkin\n","/* eslint-disable react/prop-types */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport React from 'react'\nimport { connect } from 'react-redux'\n\nclass PolyPlayer extends React.Component<any,any> {\n    constructor(props: any) {\n        super(props)\n    }\n\n    componentDidMount() {\n        if (!window.polyvPlayer) {\n            // https://player.polyv.net/script/player.js /* 點播 */\n            // https://player.polyv.net/resp/live-h5-player/latest/liveplayer.min.js /* 直播 */\n            this.loadScript('https://player.polyv.net/script/player.js').then(() => {\n                this.loadPlayer()\n            })\n        } else {\n            this.loadPlayer()\n        }\n    }\n\n    // componentWillUnmount() {\n    //     if (this.player) {\n    //         this.player.destroy()\n    //     }\n    // }\n\n    shouldComponentUpdate(nextProps, _nextState) {\n        return nextProps.user.channelId !== this.props.user.channelId\n    }\n\n    componentDidUpdate() {\n        this.loadPlayer()\n    }\n\n    loadPlayer() {\n        //window.polyvPlayer /* 點播 */\n        //window.polyvLivePlayer /* 直播 */\n        this.player = window.polyvPlayer({\n            wrap: '.player',\n            uid: process.env.REACT_APP_POLYV_USER_ID,\n            vid: \"a428b9c908a2688369d00bd7b4755712_a\",\n            width: '100%',\n            height: '100%',\n            lang: 'en',\n            autoplay: true,\n            audioMode: false,\n            // isAutoChange: true,\n            // 點播\n            // ban_seek: 'on',\n            // ban_seek_by_limit_time: 'on',\n            viewerInfo: {\n                viewerId: this.props.user.code,\n                viewerName: this.props.user.name,\n            },\n            param1: this.props.user.code,\n            param2: this.props.user.name,\n        })\n    }\n\n    loadScript(src) {\n        const headElement = document.head || document.getElementsByTagName('head')[0]\n        const _importedScript = {}\n\n        return new Promise((resolve, reject) => {\n            if (src in _importedScript) {\n                resolve()\n                return\n            }\n            const script = document.createElement('script')\n            script.type = 'text/javascript'\n            script.onerror = (_err) => {\n                headElement.removeChild(script)\n                reject(new URIError(`The Script ${src} is no accessible.`))\n            }\n            script.onload = () => {\n                _importedScript[src] = true\n                resolve()\n            }\n            headElement.appendChild(script)\n            script.src = src\n        })\n    }\n\n    render() {\n        console.log(this.props.user.channelId)\n        return (\n            <div\n                className=\"player content\"\n                id=\"player\"\n                style={{ width: '940px', height: '530px' }}\n                // key={this.props.user.channelId}\n            ></div>\n        )\n    }\n}\n\nconst mapStateToPros = (state) => {\n    return {\n        user: {},\n    }\n}\n\nexport default connect(mapStateToPros, null)(PolyPlayer)\n","import React, { FC, SetStateAction, Dispatch } from 'react'\n\nimport { icons } from '../../lib/icons'\nimport { Links } from '../../utils/links'\n\ntype CustomAvatarButtonProps = {\n    handleClickCustomAvatar(): void\n    setShowCustomAvtBtn: Dispatch<SetStateAction<boolean>>\n}\n\nconst CustomAvatarButton: FC<CustomAvatarButtonProps> = ({ handleClickCustomAvatar, setShowCustomAvtBtn }) => {\n    // const handleMouse = () => {\n    //     const btn = document.getElementById('main-custom-avatar-btn')\n\n    //     btn?.addEventListener('mousedown', () => console.log(123))\n    //     btn?.addEventListener('mouseup', () => console.log(456))\n    //     btn?.addEventListener('mousemove', () => console.log(789))\n    // }\n    return (\n        <>\n            <div\n                role=\"presentation\"\n                className=\"main-custom-avatar-btn\"\n                id=\"main-custom-avatar-btn\"\n                onClick={handleClickCustomAvatar}\n            >\n                <button\n                    className=\"main-custom-avatar-btn-close\"\n                    onClick={(e) => {\n                        e.stopPropagation()\n                        setShowCustomAvtBtn(false)\n                    }}\n                >\n                    {icons.close()}\n                </button>\n                <img src={Links.AVATAR_BTN} alt=\"icon\" />\n            </div>\n        </>\n    )\n}\n\nexport default CustomAvatarButton\n","import React, { FC, useState, MouseEvent, memo } from 'react'\nimport { Button } from 'antd'\n\n// import { useTypedSelector, useActions } from '../../../hooks'\nimport { Links } from '../../../utils/links'\n\ntype customAvatarProps = {\n    handleCloseModal(): void\n}\n\nconst customAvatar: FC<customAvatarProps> = ({ handleCloseModal }) => {\n    // const [avatarLink, setAvatarLink] = useState(Links.AVATAR_1)\n    const avatarLink = Links.AVATAR_1\n    const { _id }:any = {}\n    // const { updateChatroomAvatar, onPostUserAvatar } = useActions()\n\n    const handleSelectAvatar = (e: MouseEvent) => {\n        const avatar = 'AVATAR_' + (e.currentTarget as HTMLButtonElement).dataset.avatar\n        // setAvatarLink(Links[avatar])\n    }\n\n    const handleConfirmSelectAvatar = () => {\n        // onPostUserAvatar({ _id, avatar: avatarLink })\n        // updateChatroomAvatar({ _id, avatar: avatarLink })\n        handleCloseModal()\n    }\n\n    return (\n        <div className=\"custom-avatar-wrap\">\n            <div className=\"custom-avatar-body\">\n                <div className=\"custom-avatar-title\">\n                    <h3>欢迎来到 CxO Connect</h3>\n                    <h3>立即选择您的专属头像</h3>\n                </div>\n                <div className=\"custom-avatar-key-avatar\">\n                    <img src={avatarLink} alt=\"avatar\" />\n                </div>\n                <div className=\"custom-avatar-options\">\n                    <button onClick={(e) => handleSelectAvatar(e)} data-avatar=\"1\">\n                        <div className=\"custom-avatar-option\">\n                            <img src={Links.AVATAR_1} alt=\"avatar\" />\n                        </div>\n                    </button>\n                    <button onClick={(e) => handleSelectAvatar(e)} data-avatar=\"2\">\n                        <div className=\"custom-avatar-option\">\n                            <img src={Links.AVATAR_2} alt=\"avatar\" />\n                        </div>\n                    </button>\n                    <button onClick={(e) => handleSelectAvatar(e)} data-avatar=\"3\">\n                        <div className=\"custom-avatar-option\">\n                            <img src={Links.AVATAR_3} alt=\"avatar\" />\n                        </div>\n                    </button>\n                    <button onClick={(e) => handleSelectAvatar(e)} data-avatar=\"4\">\n                        <div className=\"custom-avatar-option\">\n                            <img src={Links.AVATAR_4} alt=\"avatar\" />\n                        </div>\n                    </button>\n                </div>\n                <div className=\"custom-avatar-btn\">\n                    <Button onClick={handleConfirmSelectAvatar}>确认更换头像</Button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default memo(customAvatar)\n","import React, { FC, memo } from 'react'\n\nimport { Links } from '../../../utils/links'\n\n// import '../../../styles/_main-pop.scss'\n\nconst ScoreRules: FC = () => {\n    return (\n        <div className=\"score-rules-wrap\">\n            <div className=\"score-rules-title\">\n                <div>互动增能量 登顶抽好礼</div>\n                <div>\n                    <img src={Links.SCORE_RULE_ICON} alt=\"\" />\n                </div>\n            </div>\n            <div className=\"score-rules-paragraph\">\n                <div className=\"score-rules-paragraph-title\">\n                    <div>\n                        <img src={Links.BALLON1} alt=\"\" />\n                    </div>\n                    <div>互动规则</div>\n                </div>\n                <ol>\n                    <li>您可参与如下互动获得相应能量值：</li>\n                    <li>参与会前提问 + 2,000 能量值</li>\n                    <li>参与现场互动答题（共 4 次）+ 1,000 能量值</li>\n                    <li>聊天窗口参与提问互动（每次 + 1,000 能量值，2,000 能量值封顶）+ 2,000 能量</li>\n                    <li>填写活动调研问卷 + 1,000 能量值</li>\n                </ol>\n            </div>\n            <div className=\"score-rules-paragraph\">\n                <div className=\"score-rules-paragraph-title\">\n                    <div>\n                        <img src={Links.BALLON2} alt=\"\" />\n                    </div>\n                    <div>抽奖规则</div>\n                </div>\n                <ol>\n                    <li>累计达到 3,000 能量值，即可获得抽奖资格</li>\n                    <li>\n                        达到 3,000 能量值后，每增加 1,000 能量值，中奖几率增加一倍（即 4,000 能量值中奖几率为 2\n                        倍，5,000 能量值中奖几率为 3 倍，6,000 能量值中奖几率为 4 倍）\n                    </li>\n                    <li>抽奖时间：抽奖将在活动期间抽奖环节进行抽取</li>\n                    <li>奖品发放：活动结束后，将由主办方进行统一发放</li>\n                    <li>奖品信息：大疆手持云台</li>\n                </ol>\n                <div className=\"score-rules-paragraph-img\">\n                    <img src={Links.SCORE_RULE_1} alt=\"\" />\n                </div>\n            </div>\n            <div className=\"score-rules-paragraph\">\n                <div className=\"score-rules-paragraph-title\">\n                    <div>\n                        <img src={Links.BALLON3} alt=\"\" />\n                    </div>\n                    <div>惊喜彩蛋抽奖</div>\n                </div>\n                <div>\n                    <p>\n                        参加活动期间 4 次互动答题，在获得 1,000\n                        能量值的同时，您还将获得惊喜彩蛋抽奖的资格，抽奖将在活动期间抽取，活动结束后，奖品将由主办方进行统一发放。\n                    </p>\n                </div>\n                <div className=\"score-rules-paragraph-img\">\n                    <img src={Links.SCORE_RULE_2} alt=\"\" />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default memo(ScoreRules)\n","import React, { FC, memo } from 'react'\n\nimport { Links } from '../../../utils/links'\n\nconst GroupChatDesc: FC = () => {\n    return (\n        <div className=\"group-chat-desc-wrap\">\n            <div className=\"group-chat-desc-title\">\n                <div>分组问答</div>\n                <div>\n                    <img src={Links.GROUP_CHAT_ICON} alt=\"\" />\n                </div>\n            </div>\n            <div className=\"group-chat-desc-paragraph\">\n                <div className=\"group-chat-desc-paragraph-title\">\n                    <div>\n                        <img src={Links.BALLON1} alt=\"\" />\n                    </div>\n                    <div>分组问答说明</div>\n                </div>\n                <div>\n                    <p>\n                        您可以根据您的需求，选择进入不同话题的分组问答聊天室，由谷歌专家针对活动期间未获得解答的问题，为您进行近一步答疑，您也可以和志同道合的参会嘉宾进行深入交流。\n                    </p>\n                </div>\n            </div>\n            <div className=\"group-chat-desc-paragraph\">\n                <div className=\"group-chat-desc-paragraph-title\">\n                    <div>\n                        <img src={Links.BALLON2} alt=\"\" />\n                    </div>\n                    <div>登录方式说明</div>\n                </div>\n                <ol>\n                    <li>选择您感兴趣的话题聊天室登录，将以腾讯会议形式进行</li>\n                    <li>\n                        <div>腾讯会议登入方式</div>\n                        <div>\n                            PC端：请确保您的电脑已安装腾讯会议应用，如还没有安装请\n                            <a href=\"https://meeting.tencent.com/download/\" target=\"blank\">\n                                点击这里\n                            </a>\n                            下载并安装手机端：请使用以下方式登录如果您在登录腾讯会议过程中有任何问题，请在聊天窗口告诉我们，会议小助手将尽快协助您解决\n                            下载并安装\n                        </div>\n                        <div>手机端：请使用以下方式登录</div>\n                        <div className=\"group-chat-qrcode-gp\">\n                            <div className=\"group-chat-qrcode\">\n                                <img src={Links.WE_CHAT} alt=\"\" />\n                                <div>微信小程序</div>\n                            </div>\n                            <div className=\"group-chat-qrcode\">\n                                <img src={Links.IOS} alt=\"\" />\n                                <div>iOS 应用下载</div>\n                            </div>\n                            <div className=\"group-chat-qrcode\">\n                                <img src={Links.ANDROID} alt=\"\" />\n                                <div>Android 应用下载</div>\n                            </div>\n                        </div>\n                        <div>如果您在登录过程中有任何问题，请在聊天窗口告诉我们，会议小助手将尽快协助您解决</div>\n                    </li>\n                </ol>\n            </div>\n        </div>\n    )\n}\n\n//     微信小程序                      iOS应用下载                   Android应用下载\n\nexport default memo(GroupChatDesc)\n","import React, { FC } from 'react'\nimport Skeleton from 'react-loading-skeleton'\nimport { Button } from 'antd'\nimport { useIntl } from 'react-intl'\n\ntype DisconnectedSkeletonProps = {\n    showReload: boolean\n    handleReload(): void\n}\n\nconst DisconnectedSkeleton: FC<DisconnectedSkeletonProps> = ({ showReload, handleReload }) => {\n    const intl = useIntl()\n\n    return (\n        <div style={{ position: 'relative' }}>\n            <div\n                style={{\n                    position: 'absolute',\n                    top: '40%',\n                    left: '0',\n                    right: '0',\n                    zIndex: '200',\n                    fontSize: '1rem',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    flexDirection: 'column',\n                }}\n            >\n                {!showReload ? (\n                    <span>{intl.formatMessage({ id: 'main.TRYING_CONNECTING' })}</span>\n                ) : (\n                    <>\n                        <span>{intl.formatMessage({ id: 'main.MAKE_RELOAD_PAGE_FOR_CONNECTING' })}</span>\n                        <Button onClick={handleReload}>{intl.formatMessage({ id: 'main.RELOAD_PAGE' })}</Button>\n                    </>\n                )}\n            </div>\n            <Skeleton height={700} />\n        </div>\n    )\n}\n\nexport default DisconnectedSkeleton\n","import React, {\n    FC,\n    useState,\n    useEffect,\n    useContext,\n    useCallback,\n    createContext,\n    ReactNode,\n    Dispatch,\n    useRef,\n    SetStateAction,\n} from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport Lottie from 'react-lottie'\n\nimport CustomModal from '../../components/ui/CustomModal'\nimport InteractiveSec from './interactiveSec/InteractiveSec'\nimport Agenda from './agenda/Agenda'\n// import { useTypedSelector, useActions } from '../../hooks'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { joinInitRoom, getCurrentAgenda, checkGroupChatStatus } from '../../lib/services'\nimport { SwitchAgendaPageEventData, GroupChatShowData } from '../../lib/socketDataTypes'\nimport HeaderNav from './nav/HeaderNav'\nimport ShareWalkin from './modal/ShareWalkin'\nimport PolyPlayer from './player/PolyPlayer'\nimport CustomAvatarButton from '../../components/ui/CustomAvatarButton'\nimport CustomAvatar from './modal/CustomAvatar'\nimport ScoreRules from './modal/ScoreRules'\nimport GroupChatDesc from './modal/GroupChatDesc'\nimport GroupChatView from './groupChat/GroupChatView'\nimport DisconnectedSkeleton from '../../components/ui/DisconnectedSkeleton'\nimport { localeContext, LocaleProps } from '../../index'\nimport { LottieJSON } from '../../utils/links'\nimport { handleCheckParams } from '../../lib/fn'\nimport 'react-loading-skeleton/dist/skeleton.css'\nimport '../../styles/main.scss'\nimport { getInitial, getScore, getSurveys } from '../../store/mainSlice'\n\nexport type ModalProps = {\n    setModalContent: Dispatch<SetStateAction<ReactNode>>\n    setShowModal: Dispatch<SetStateAction<boolean>>\n}\n\nexport const ModalContext = createContext<ModalProps | null>(null)\n\nconst handleCloseWindow = (e: BeforeUnloadEvent) => {\n    e.preventDefault()\n    e.returnValue = true\n}\n\nconst Main: FC = () => {\n    const [showModal, setShowModal] = useState(false)\n    const [modalContent, setModalContent] = useState<ReactNode | null>(null)\n    const [changeEvent, setChangeEvent] = useState(false)\n    const [showReload, setShowReload] = useState(false)\n    const [onlineUsers, setOnlineUsers] = useState(0)\n    const [showCustomAvtBtn, setShowCustomAvtBtn] = useState(true)\n    const [groupChatShow, setGroupChatShow] = useState(true)\n    const [openAnimation, setOpenAnimation] = useState(true)\n    const [showMain, setShowMain] = useState(false)\n\n    const { setLocale } = useContext(localeContext) as LocaleProps\n    const { global, main }: any = useSelector(state => { return state });\n\n    const { socket, socketId, socketOn } = global\n    const {mainInitial} = main\n\n    const dispatch = useDispatch()\n\n    console.log(mainInitial,'mainInitial')\n\n    const navigate = useNavigate()\n\n    const sliderRef = useRef<any>(null)\n    const timer5Ref = useRef(0)\n    const timer30Ref = useRef(0)\n    const drawingTimerRef = useRef(0)\n\n    useEffect(() => {\n        dispatch(getInitial())\n        dispatch(getScore())\n        dispatch(getSurveys())\n    },[dispatch])\n\n    /**\n     * 加入 event id 所屬房間\n     */\n    useEffect(() => {\n        // 未登入\n        // if (!auth) navigate(`/${process.env.REACT_APP_DEFAULT_EVENT_ID as string}`, { replace: true })\n        // // 已登入，加入所屬房間\n        // else joinInitRoom(_id, eventId, socketId, code, channelId)\n\n        return () => window.clearTimeout(drawingTimerRef.current)\n    }, [socket, socketId])\n\n    /**\n     * 關閉瀏覽器分頁前提醒\n     */\n    useEffect(() => {\n        window.addEventListener('beforeunload', handleCloseWindow)\n        return () => window.removeEventListener('beforeunload', handleCloseWindow)\n    }, [])\n\n    useEffect(() => {\n        if (socket) {\n            // 監聽切換 agenda 事件\n            socket.on('switchAgendaPage', (data: any) => handleReceiveSwitchAgendaPageJob(data))\n            // 監聽重複登入事件，登出使用者\n            socket.on('alreadyInRoom', (data: any) => handleLoginDuplicated(data))\n            // 監聽後台 drop 用戶清單，將用戶導向至 landing page\n            socket.on('updateUserList', () => handleUpdateUserList())\n            // 監聽後台重新整理特定用戶頁面\n            socket.on('reload', () => handleReload())\n            // 監聽獲取目前在線人數\n            socket.on('getOnlineCount', (data: any) => handleGetOnlineCount(data))\n            // 監聽接收抽獎獎品\n            socket.on('deliverPrize', (data: any) => handleReceivePrize(data))\n            // 監聽開關群聊視窗\n            socket.on('groupChatOpen', (data: any) => handleGroupChatOpen(data))\n        }\n\n\n        return () => {\n            if (socket) {\n                socket.removeListener('switchAgendaPage')\n                socket.removeListener('alreadyInRoom')\n                socket.removeListener('updateUserList')\n                socket.removeListener('reload')\n                socket.removeListener('getOnlineCount')\n                socket.removeListener('deliverPrize')\n                socket.removeListener('groupChatOpen')\n            }\n\n        }\n    }, [socket])\n\n\n    /**\n     * 確認群聊視窗開啟狀態\n     */\n    useEffect(() => {\n        async function checkGroupChatOpenStatus() {\n            const data = await checkGroupChatStatus()\n            setGroupChatShow(data)\n        }\n\n        checkGroupChatOpenStatus()\n    }, [])\n\n    /**\n     * socket 斷線 console.log\n     */\n    useEffect(() => {\n        if (!socketOn) {\n            const timer5 = window.setTimeout(() => {\n                // onDeliverSocketDisconnect({ code, des: '5' })\n            }, 5000)\n\n            const timer30 = window.setTimeout(() => {\n                // onDeliverSocketDisconnect({ code, des: '30' })\n                setShowReload(true)\n            }, 30000)\n\n            timer5Ref.current = timer5\n            timer30Ref.current = timer30\n        } else {\n            setShowReload(false)\n            clearTimeout(timer5Ref.current)\n            clearTimeout(timer30Ref.current)\n        }\n\n        return () => {\n            clearTimeout(timer5Ref.current)\n            clearTimeout(timer30Ref.current)\n        }\n    }, [socketOn])\n\n    /**\n     * 根據語言及活動 id 訂定初始畫面\n     */\n    // useEffect(() => {\n    //     if (eventId && eventId.includes('-')) {\n    //         handleCheckParams(eventId, setLocale)\n    //     }\n    // }, [eventId])\n\n    /**\n     * 獲取目前 agenda 的 index\n     */\n    // useEffect(() => {\n    //     async function getAgenda() {\n    //         const { data } = await getCurrentAgenda(eventId)\n\n    //         if (data) {\n    //             handleOnClick(parseInt(data))\n    //             forwardToCurrentAgenda({ current: parseInt(data) })\n    //         } else {\n    //             handleOnClick(0)\n    //             forwardToCurrentAgenda({ current: 0 })\n    //         }\n    //     }\n\n    //     getAgenda()\n    // }, [])\n\n\n\n    /**\n     * 獲取裝置高度\n     */\n    useEffect(() => {\n        const vh = window.innerHeight * 0.01\n        document.documentElement.style.setProperty('--vh', `${vh}px`)\n    }, [])\n\n\n    /**\n     * 点播初始化完成\n     */\n    const playerComplete = () => {\n        setOpenAnimation(false)\n        setShowMain(true)\n    }\n\n    /**\n     * 監聽後台重新 reload 特定使用者頁面\n     */\n    const handleReload = () => {\n        window.removeEventListener('beforeunload', handleCloseWindow)\n        window.location.reload()\n    }\n\n    const handleGroupChatOpen = ({ groupChatShow }: GroupChatShowData) => {\n        setGroupChatShow(groupChatShow)\n    }\n\n    /**\n     * 處理接收目前在線人數事件的 callback\n     */\n    const handleGetOnlineCount = (data: any) => {\n        const { online } = data\n        setOnlineUsers(online)\n    }\n\n    /**\n     * 處理接收抽獎獎品事件的 callback\n     */\n    const handleReceivePrize = (data: any) => {\n        // const {\n        //     payload: { winIds, prize },\n        // } = data\n\n        // if (_id.includes(winIds)) updateUserAwards(prize)\n        // else return\n    }\n\n    /**\n     * 監聽後台刪除用戶清單事件的 callback\n     */\n    const handleUpdateUserList = () => {\n        // setUserLoginError({ error: 'USER_LIST_DROP' })\n        // navigate(`/${eventId}`, { replace: true })\n    }\n\n    /**\n     * 處理接收切換 agenda 頁面定時任務訊息後需觸發事件\n     */\n    const handleReceiveSwitchAgendaPageJob = (data: SwitchAgendaPageEventData) => {\n        const {\n            payload: { payload },\n            message,\n        } = data\n\n        console.log({ message })\n\n        // forwardToCurrentAgenda({ current: payload })\n        handleOnClick(payload)\n    }\n\n    /**\n     * 處理接收伺服器判斷重複登入訊息，使使用者登出\n     */\n    const handleLoginDuplicated = (data: { expire: boolean }) => {\n        // const { expire } = data\n\n        // if (eventId && !expire) {\n        //     setUserLoginError({ error: 'USER_LOGIN_IN_DUPLICATE_ERROR' })\n        //     navigate(`/${eventId}`, { replace: true })\n        // } else {\n        //     setUserLoginError({ error: 'USER_LOG_OUT' })\n        //     navigate(`/${eventId}`, { replace: true })\n        // }\n    }\n\n    /**\n     * 關閉彈窗\n     */\n    const handleCloseModal = useCallback(() => {\n        setShowModal(false)\n    }, [])\n\n    /**\n     * agenda slides 滑動至當前 index\n     * @param index\n     */\n    const handleOnClick = (index: number) => {\n        if (sliderRef.current) sliderRef.current.slickGoTo(index)\n    }\n\n    /**\n     * 向後端請求新的 walkin code\n     */\n    const handlePostSharedWalkin = () => {\n        // const [currentEvent] = event.filter((ev) => ev.eventId === eventId)\n        // onPostWalkin({ eventId, channelId: currentEvent.channelId, code })\n    }\n\n    /**\n     * 點擊分享 walkin code 按鈕觸發\n     */\n    const handleClickSharedWalkin = () => {\n        handlePostSharedWalkin()\n        setModalContent(<ShareWalkin handlePostSharedWalkin={handlePostSharedWalkin} />)\n        setShowModal(true)\n    }\n\n    /**\n     * 點擊客製化頭像按鈕\n     */\n    const handleClickCustomAvatar = () => {\n        setModalContent(<CustomAvatar handleCloseModal={handleCloseModal} />)\n        setShowModal(true)\n    }\n\n    /**\n     * 點擊積分規則按鈕\n     */\n    const handleClickScoreRules = () => {\n        setModalContent(<ScoreRules />)\n        setShowModal(true)\n    }\n\n    /**\n     * 點擊分組回答按鈕\n     */\n    const handleClickGroupChatDescription = () => {\n        setModalContent(<GroupChatDesc />)\n        setShowModal(true)\n    }\n\n    return (\n        <div className=\"main-wrap\" id=\"main-wrap\">\n            <CustomModal showModal={showModal} handleCloseModal={handleCloseModal}>\n                {modalContent}\n            </CustomModal>\n            {openAnimation && (\n                <div className=\"main-open-animation-lottie\">\n                    <div className=\"main-open-animation-container\">\n                        <Lottie\n                            isClickToPauseDisabled={true}\n                            // speed={0.8}\n                            options={{\n                                loop: false,\n                                autoplay: true,\n                                animationData: LottieJSON.OPEN_ANIMATION,\n                                rendererSettings: {\n                                    preserveAspectRatio: 'xMidYMid slice'\n                                }\n\n                            }}\n                            eventListeners={[\n                                {\n                                    eventName: 'complete',\n                                    callback: () => setOpenAnimation(false),\n                                },\n                            ]}\n                        // id=\"open-animation\"\n                        ></Lottie>\n                    </div>\n                    {/* <div className=\"main-open-animation-container-mo\">\n                        <Lottie\n                            isClickToPauseDisabled={true}\n                            options={{\n                                loop: true,\n                                autoplay: true,\n                                animationData: LottieJSON.OPEN_ANIMATION_MO,\n                                rendererSettings: {\n                                    preserveAspectRatio: 'xMidYMid slice'\n                                }\n                            }}\n                        // id=\"open-animation\"\n                        ></Lottie>\n                    </div> */}\n                </div>\n            )}\n            <ModalContext.Provider value={{ setShowModal, setModalContent }}>\n                <HeaderNav\n                    changeEvent={changeEvent}\n                    setChangeEvent={setChangeEvent}\n                    handleClickSharedWalkin={handleClickSharedWalkin}\n                    onlineUsers={onlineUsers}\n                    setModalContent={setModalContent}\n                    setShowModal={setShowModal}\n                    handleClickScoreRules={handleClickScoreRules}\n                    handleClickGroupChatDescription={handleClickGroupChatDescription}\n                />\n\n                <div className=\"main-body\">\n                    {showCustomAvtBtn && (\n                        <CustomAvatarButton\n                            handleClickCustomAvatar={handleClickCustomAvatar}\n                            setShowCustomAvtBtn={setShowCustomAvtBtn}\n                        />\n                    )}\n                    <div className=\"main-body-left\">\n                        <div className=\"main-left-player-mask\">\n                            {/* {groupChatShow ? <GroupChatView /> : <PolyPlayer />} */}\n                            <PolyPlayer playerComplete={playerComplete} />\n                        </div>\n                        <div className=\"main-agenda-container\">\n                            <Agenda sliderRef={sliderRef} />\n                        </div>\n                    </div>\n\n                    {!socketOn ? (\n                        <DisconnectedSkeleton showReload={showReload} handleReload={handleReload} />\n                    ) : (\n                        <InteractiveSec setChangeEvent={setChangeEvent} />\n                    )}\n                </div>\n            </ModalContext.Provider>\n        </div>\n    )\n}\n\nexport default Main\n"],"names":["sktFetch","event","data","Promise","resolve","socket","error","handleTimestampToString","timestamp","hour","Date","getHours","date","getMinutes","debounce","func","timer","wait","args","window","clearTimeout","setTimeout","apply","setThanks","useState","inputName","setInputName","inputPhone","setInputPhone","inputAddress","setInputAddress","user","name","_id","handleInputName","val","handleInputPhone","handleInputAddress","useEffect","className","defaultValue","onChange","e","target","value","onClick","xss","disabled","Panel","Collapse","thanks","swag","awards","prizeFinished","defaultActiveKey","header","src","Links","alt","prizeName","isClickToPauseDisabled","options","loop","autoplay","animationData","LottieJSON","rendererSettings","preserveAspectRatio","handleReplyMessageClick","scrollRef","handleScroll","chat","messages","loading","useSelector","state","main","mainInitial","intl","useIntl","antIcon","LoadingOutlined","style","fontSize","spin","onScroll","indicator","map","message","Fragment","to","from","formatMessage","id","repliedName","helper","join","type","replied_id","repliedAvatar","avatar","repliedContent","content","role","icons","createTime","length","substring","googler","company","dangerouslySetInnerHTML","__html","ref","handleSubmitMessage","inputContent","replied","handleRepliedDetailClose","stickers","emoji","handleSendSticker","handleSendEmoji","overlay","emojis","emj","gifStickers","stk","placement","messageInputRef","handleInputKeyDown","setIsInputtingMandarin","setInputContent","showReply","section","current","focus","autoComplete","onSubmit","preventDefault","placeholder","maxLength","onKeyPress","onCompositionStart","onCompositionEnd","useRef","eventId","locale","comingData","useContext","localeContext","scrollIntoView","block","$scroll","scrollTop","scrollHeight","clientHeight","NavigateBar","setChangeEvent","location","useLocation","selectedKeys","pathname","mode","memo","currentSurveyRef","thanksShow","handleSubmitSurveyAnswer","selectedOption","setSelectedOption","submitDisabled","setSubmitDisabled","boxChecked","setBoxChecked","result","total","correct","handleOptionClick","pkg","includes","option","filter","s","subject","rlt","fontWeight","toFixed","percent","strokeColor","showInfo","checked","htmlFor","surveyId","category","PersonalScore","scoreDetail","detail","collapseOpened","setCollapseOpened","score","sc","handleRanking","rank","leader","i","uid","replace","userLocate","socketId","code","identifier","deliverMessageToConsole","msgId","room","checkPostSurveyStatus","checkGroupChatStatus","receiveSurvey","currentEventId","TextArea","Input","restPostSurveyPage","setRestPostSurveyPage","setShowUnlockResult","showUnlockResult","resultRef","textAnswer","setTextAnswer","postSurveyShow","postSurvey","userPostSurveys","postSurveys","nextDisabled","setNextDisabled","navigate","useNavigate","mustAnswer","handleAddResult","isFinished","sendingSurvey","postingResult","userId","userCode","selected","sending","filteredResults","r","handleNext","nextSurveyId","nextType","op","document","body","clientWidth","prevSurveyId","prevType","prevSelected","handlePrev","INIT_REPLIED_DETAIL","timerRef","isInputtingMandarin","surveyShow","setSurveyShow","setThanksShow","setReplied","luckyDrawWinner","setLuckyDrawWinner","luckyDrawAnimation","setLuckyDrawAnimation","setPostSurveyShow","setShowReply","admin","whoSharedWalkin","finishSwag","global","socketOn","ModalContext","setShowModal","setModalContent","dispatch","useDispatch","getScore","getSurveys","checkStatus","on","receivePassedSpeech","receivePassedQuestion","handleReceiveChatbotJob","handleReceiveLuckyDraw","handleReceivePostSurveyGuiding","handleReceiveRaiseSurveyJob","handlePostSurveyOpen","handleLeaderBoardUpdate","handleReceiveUserScore","removeListener","userScore","leaders","postsurveySlug","handlePostSurveyJob","parseInt","process","surveyData","payload","Object","keys","console","log","handleAfterSubmitSurveyAnswer","helperSpeech_id","handleSubmitChatbotMessage","win","approved","ObjectID","toString","now","messageLocal","response","handleAddToSelf","handleSendMessage","sticker","trim","useCallback","luckyWinner","winner","overflow","isAnswer","o","path","element","key","shiftKey","stickerLink","dataset","$input","selectionStart","startPos","endPos","selectionEnd","restoreTop","handleInsertEmoji","AgendaItem","symbols","topic","Agenda","sliderRef","jsonData","agenda","ve","handleGetTopics","topics","spks","handleGetSymbols","dots","infinite","speed","slidesToShow","slidesToScroll","initialSlide","responsive","breakpoint","settings","arrows","swipe","changeEvent","onlineUsers","handleClickSharedWalkin","handleClickScoreRules","handleClickGroupChatDescription","eventRef","LandingPageImages","display","FAQ","handlePostSharedWalkin","walkinCode","walkin","textVal","compact","width","height","navigator","clipboard","writeText","PolyPlayer","props","polyvPlayer","this","loadPlayer","loadScript","then","nextProps","_nextState","channelId","player","wrap","vid","lang","audioMode","viewerInfo","viewerId","viewerName","param1","param2","headElement","head","getElementsByTagName","_importedScript","reject","script","createElement","onerror","_err","removeChild","URIError","onload","appendChild","React","connect","handleClickCustomAvatar","setShowCustomAvtBtn","stopPropagation","customAvatar","handleCloseModal","avatarLink","handleSelectAvatar","currentTarget","ScoreRules","GroupChatDesc","href","showReload","handleReload","position","top","left","right","zIndex","justifyContent","alignItems","flexDirection","createContext","handleCloseWindow","returnValue","showModal","modalContent","setShowReload","setOnlineUsers","showCustomAvtBtn","setGroupChatShow","openAnimation","setOpenAnimation","setShowMain","setLocale","timer5Ref","timer30Ref","drawingTimerRef","getInitial","addEventListener","removeEventListener","handleReceiveSwitchAgendaPageJob","handleLoginDuplicated","handleUpdateUserList","handleGetOnlineCount","handleReceivePrize","handleGroupChatOpen","checkGroupChatOpenStatus","timer5","timer30","vh","innerHeight","documentElement","setProperty","reload","groupChatShow","online","handleOnClick","index","slickGoTo","CustomModal","eventListeners","eventName","callback","Provider","CustomAvatar","playerComplete"],"sourceRoot":""}